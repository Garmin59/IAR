###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.2.14835/W32 for ARM       05/Jan/2018  18:41:22
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Ilya\Projects\332 WS2811 hew year light\IAR\project\ws2811.c
#    Command line =  
#        -f C:\Users\75BD~1\AppData\Local\Temp\EW5420.tmp
#        ("D:\Ilya\Projects\332 WS2811 hew year light\IAR\project\ws2811.c" -D
#        STM32F0XX -D STM32F051 --preprocess=c "D:\Ilya\Projects\332 WS2811 hew
#        year light\IAR\Debug\List" -lC "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\Debug\List" -o "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I "D:\Ilya\Projects\332 WS2811
#        hew year light\IAR\system\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\project\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\CMSIS\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\CMSIS\inc\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\" -Ol --use_c++_inline --relaxed_fp --source_encoding locale
#        --text_out locale)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Ilya\Projects\332 WS2811 hew year light\IAR\Debug\List\ws2811.lst
#    Object file  =  
#        D:\Ilya\Projects\332 WS2811 hew year light\IAR\Debug\Obj\ws2811.o
#
###############################################################################

D:\Ilya\Projects\332 WS2811 hew year light\IAR\project\ws2811.c
      1          /*
      2          * file ws2811.c
      3          */
      4          
      5          #include  <string.h>
      6          #include	"stm32f0xx.h"				// определения регистров и битовых переменных
      7          #include	"stm32f0xx_conf.h"	// конфигурация используемых функций CMSIS
      8          #include	"stm32f051_it.h"    // системное время и таймеры

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t system_time(void)
   \                     system_time: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void timer_reset(uint32_t *)
   \                     timer_reset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       system_time
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp bool timer_end(uint32_t *, uint32_t)
   \                     timer_end: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x.... 0x....      BL       system_time
   \   0000000A   0x6829             LDR      R1,[R5, #+0]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0x42A0             CMP      R0,R4
   \   00000010   0xD301             BCC      ??timer_end_0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE000             B        ??timer_end_1
   \                     ??timer_end_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??timer_end_1: (+1)
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
      9          #include	"core_cm0.h"				// определения инлайнов

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x06C0             LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000004   0x0EC0             LSRS     R0,R0,#+27
   \   00000006   0x4081             LSLS     R1,R1,R0
   \   00000008   0x....             LDR      R0,??DataTable7_1  ;; 0xe000e100
   \   0000000A   0x6001             STR      R1,[R0, #+0]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0002             MOVS     R2,R0
   \   00000004   0xB252             SXTB     R2,R2
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD523             BPL      ??NVIC_SetPriority_0
   \   0000000A   0x....             LDR      R3,??DataTable4  ;; 0xe000ed1c
   \   0000000C   0x0002             MOVS     R2,R0
   \   0000000E   0xB252             SXTB     R2,R2
   \   00000010   0x0712             LSLS     R2,R2,#+28       ;; ZeroExtS R2,R2,#+28,#+28
   \   00000012   0x0F12             LSRS     R2,R2,#+28
   \   00000014   0x3A08             SUBS     R2,R2,#+8
   \   00000016   0x0892             LSRS     R2,R2,#+2
   \   00000018   0x2404             MOVS     R4,#+4
   \   0000001A   0x4362             MULS     R2,R4,R2
   \   0000001C   0x....             LDR      R4,??DataTable4  ;; 0xe000ed1c
   \   0000001E   0x0005             MOVS     R5,R0
   \   00000020   0xB26D             SXTB     R5,R5
   \   00000022   0x072D             LSLS     R5,R5,#+28       ;; ZeroExtS R5,R5,#+28,#+28
   \   00000024   0x0F2D             LSRS     R5,R5,#+28
   \   00000026   0x3D08             SUBS     R5,R5,#+8
   \   00000028   0x08AD             LSRS     R5,R5,#+2
   \   0000002A   0x2604             MOVS     R6,#+4
   \   0000002C   0x4375             MULS     R5,R6,R5
   \   0000002E   0x5964             LDR      R4,[R4, R5]
   \   00000030   0x25FF             MOVS     R5,#+255
   \   00000032   0x0786             LSLS     R6,R0,#+30       ;; ZeroExtS R6,R0,#+30,#+30
   \   00000034   0x0FB6             LSRS     R6,R6,#+30
   \   00000036   0x2708             MOVS     R7,#+8
   \   00000038   0x437E             MULS     R6,R7,R6
   \   0000003A   0x40B5             LSLS     R5,R5,R6
   \   0000003C   0x43AC             BICS     R4,R4,R5
   \   0000003E   0x0189             LSLS     R1,R1,#+6
   \   00000040   0xB2C9             UXTB     R1,R1
   \   00000042   0x0780             LSLS     R0,R0,#+30       ;; ZeroExtS R0,R0,#+30,#+30
   \   00000044   0x0F80             LSRS     R0,R0,#+30
   \   00000046   0x2508             MOVS     R5,#+8
   \   00000048   0x4368             MULS     R0,R5,R0
   \   0000004A   0x4081             LSLS     R1,R1,R0
   \   0000004C   0x4321             ORRS     R1,R1,R4
   \   0000004E   0x5099             STR      R1,[R3, R2]
   \   00000050   0xE01B             B        ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   00000052   0x....             LDR      R2,??DataTable8  ;; 0xe000e400
   \   00000054   0x0003             MOVS     R3,R0
   \   00000056   0xB25B             SXTB     R3,R3
   \   00000058   0x089B             LSRS     R3,R3,#+2
   \   0000005A   0x2404             MOVS     R4,#+4
   \   0000005C   0x4363             MULS     R3,R4,R3
   \   0000005E   0x58D2             LDR      R2,[R2, R3]
   \   00000060   0x23FF             MOVS     R3,#+255
   \   00000062   0x0784             LSLS     R4,R0,#+30       ;; ZeroExtS R4,R0,#+30,#+30
   \   00000064   0x0FA4             LSRS     R4,R4,#+30
   \   00000066   0x2508             MOVS     R5,#+8
   \   00000068   0x436C             MULS     R4,R5,R4
   \   0000006A   0x40A3             LSLS     R3,R3,R4
   \   0000006C   0x439A             BICS     R2,R2,R3
   \   0000006E   0x0189             LSLS     R1,R1,#+6
   \   00000070   0xB2C9             UXTB     R1,R1
   \   00000072   0x0783             LSLS     R3,R0,#+30       ;; ZeroExtS R3,R0,#+30,#+30
   \   00000074   0x0F9B             LSRS     R3,R3,#+30
   \   00000076   0x2408             MOVS     R4,#+8
   \   00000078   0x4363             MULS     R3,R4,R3
   \   0000007A   0x4099             LSLS     R1,R1,R3
   \   0000007C   0x4311             ORRS     R1,R1,R2
   \   0000007E   0x....             LDR      R2,??DataTable8  ;; 0xe000e400
   \   00000080   0xB240             SXTB     R0,R0
   \   00000082   0x0880             LSRS     R0,R0,#+2
   \   00000084   0x2304             MOVS     R3,#+4
   \   00000086   0x4358             MULS     R0,R3,R0
   \   00000088   0x5011             STR      R1,[R2, R0]
   \                     ??NVIC_SetPriority_1: (+1)
   \   0000008A   0xBDF0             POP      {R4-R7,PC}       ;; return
     10          #include 	"effects.h"
     11          #include	"ws2811.h"	
     12          #include	"global.h"					// глобальные переменные
     13          #include 	"messages.h"

   \                                 In section .text, align 4
   \   __interwork __softfp void send_message(u8)
   \                     send_message: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x4905             LDR      R1,??send_message_0
   \   00000004   0x0002             MOVS     R2,R0
   \   00000006   0xB2D2             UXTB     R2,R2
   \   00000008   0x5C89             LDRB     R1,[R1, R2]
   \   0000000A   0x2902             CMP      R1,#+2
   \   0000000C   0xD003             BEQ      ??send_message_1
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x4A01             LDR      R2,??send_message_0
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0x5411             STRB     R1,[R2, R0]
   \                     ??send_message_1: (+1)
   \   00000016   0xBD00             POP      {PC}             ;; return
   \                     ??send_message_0:
   \   00000018   0x........         DC32     p
     14          
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void init_ws2811_pin (void)
     17          {
   \                     init_ws2811_pin: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     18            // init pin
     19          	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;  // разрешаем тактирование GPIOB
   \   00000002   0x....             LDR      R0,??DataTable8_1  ;; 0x40021014
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x02C9             LSLS     R1,R1,#+11       ;; #+262144
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable8_1  ;; 0x40021014
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     20          
     21          	GPIOF->MODER &= ~GPIO_MODER_MODER4;			// PinF4 - input кнопка USER
   \   00000010   0x....             LDR      R0,??DataTable6  ;; 0x48001400
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x....             LDR      R1,??DataTable6_1  ;; 0xfffffcff
   \   00000016   0x4001             ANDS     R1,R1,R0
   \   00000018   0x....             LDR      R0,??DataTable6  ;; 0x48001400
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     22          	GPIOF->OTYPER &= ~GPIO_OTYPER_OT_4;			// PinF4 - pushpull
   \   0000001C   0x....             LDR      R0,??DataTable6_2  ;; 0x48001404
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0x....             LDR      R1,??DataTable6_3  ;; 0xffef
   \   00000022   0x4001             ANDS     R1,R1,R0
   \   00000024   0x....             LDR      R0,??DataTable6_2  ;; 0x48001404
   \   00000026   0x8001             STRH     R1,[R0, #+0]
     23          	GPIOF->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;	// PinF4 speed low
   \   00000028   0x....             LDR      R0,??DataTable6_4  ;; 0x48001408
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x....             LDR      R1,??DataTable6_1  ;; 0xfffffcff
   \   0000002E   0x4001             ANDS     R1,R1,R0
   \   00000030   0x....             LDR      R0,??DataTable6_4  ;; 0x48001408
   \   00000032   0x6001             STR      R1,[R0, #+0]
     24          	GPIOF->PUPDR |= GPIO_PUPDR_PUPDR4_1;		// PinF4 подтяжка к земле
   \   00000034   0x....             LDR      R0,??DataTable6_5  ;; 0x4800140c
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x2180             MOVS     R1,#+128
   \   0000003A   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   0000003C   0x4301             ORRS     R1,R1,R0
   \   0000003E   0x....             LDR      R0,??DataTable6_5  ;; 0x4800140c
   \   00000040   0x6001             STR      R1,[R0, #+0]
     25          
     26            GPIOB->MODER &= ~GPIO_MODER_MODER9;
   \   00000042   0x....             LDR      R0,??DataTable7_2  ;; 0x48000400
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x....             LDR      R1,??DataTable7_3  ;; 0xfff3ffff
   \   00000048   0x4001             ANDS     R1,R1,R0
   \   0000004A   0x....             LDR      R0,??DataTable7_2  ;; 0x48000400
   \   0000004C   0x6001             STR      R1,[R0, #+0]
     27            GPIOB->MODER |= GPIO_MODER_MODER9_1;        // PinB9 - 10: Alternate function mode
   \   0000004E   0x....             LDR      R0,??DataTable7_2  ;; 0x48000400
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x2180             MOVS     R1,#+128
   \   00000054   0x0309             LSLS     R1,R1,#+12       ;; #+524288
   \   00000056   0x4301             ORRS     R1,R1,R0
   \   00000058   0x....             LDR      R0,??DataTable7_2  ;; 0x48000400
   \   0000005A   0x6001             STR      R1,[R0, #+0]
     28            GPIOB->OTYPER &= GPIO_OTYPER_OT_9;		      // PinB9 - pushpull
   \   0000005C   0x....             LDR      R0,??DataTable7_4  ;; 0x48000404
   \   0000005E   0x8800             LDRH     R0,[R0, #+0]
   \   00000060   0x2180             MOVS     R1,#+128
   \   00000062   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   00000064   0x4008             ANDS     R0,R0,R1
   \   00000066   0x....             LDR      R1,??DataTable7_4  ;; 0x48000404
   \   00000068   0x8008             STRH     R0,[R1, #+0]
     29            GPIOB->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR9;	// PinB9 speed low
   \   0000006A   0x....             LDR      R0,??DataTable7_5  ;; 0x48000408
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x....             LDR      R1,??DataTable7_3  ;; 0xfff3ffff
   \   00000070   0x4001             ANDS     R1,R1,R0
   \   00000072   0x....             LDR      R0,??DataTable7_5  ;; 0x48000408
   \   00000074   0x6001             STR      R1,[R0, #+0]
     30            GPIOB->PUPDR &= GPIO_PUPDR_PUPDR9;          // PinB9 no pullup
   \   00000076   0x....             LDR      R0,??DataTable8_2  ;; 0x4800040c
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x21C0             MOVS     R1,#+192
   \   0000007C   0x0309             LSLS     R1,R1,#+12       ;; #+786432
   \   0000007E   0x4001             ANDS     R1,R1,R0
   \   00000080   0x....             LDR      R0,??DataTable8_2  ;; 0x4800040c
   \   00000082   0x6001             STR      R1,[R0, #+0]
     31            GPIOB->ODR &= ~GPIO_ODR_9;                  // PinB9 = 0
   \   00000084   0x....             LDR      R0,??DataTable8_3  ;; 0x48000414
   \   00000086   0x8800             LDRH     R0,[R0, #+0]
   \   00000088   0x....             LDR      R1,??DataTable8_4  ;; 0xfdff
   \   0000008A   0x4001             ANDS     R1,R1,R0
   \   0000008C   0x....             LDR      R0,??DataTable8_3  ;; 0x48000414
   \   0000008E   0x8001             STRH     R1,[R0, #+0]
     32            GPIOB->AFR[1] &= ~GPIO_AFRH_AFRH9;
   \   00000090   0x....             LDR      R0,??DataTable8_5  ;; 0x48000424
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x21F0             MOVS     R1,#+240
   \   00000096   0x4388             BICS     R0,R0,R1
   \   00000098   0x....             LDR      R1,??DataTable8_5  ;; 0x48000424
   \   0000009A   0x6008             STR      R0,[R1, #+0]
     33            GPIOB->AFR[1] |= GPIO_AF_AF2 << (4 * (9 - 8));
   \   0000009C   0x....             LDR      R0,??DataTable8_5  ;; 0x48000424
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x2120             MOVS     R1,#+32
   \   000000A2   0x4301             ORRS     R1,R1,R0
   \   000000A4   0x....             LDR      R0,??DataTable8_5  ;; 0x48000424
   \   000000A6   0x6001             STR      R1,[R0, #+0]
     34            
     35            // init timer TIM17_CH1
     36            RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
   \   000000A8   0x....             LDR      R0,??DataTable8_6  ;; 0x40021018
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x2180             MOVS     R1,#+128
   \   000000AE   0x02C9             LSLS     R1,R1,#+11       ;; #+262144
   \   000000B0   0x4301             ORRS     R1,R1,R0
   \   000000B2   0x....             LDR      R0,??DataTable8_6  ;; 0x40021018
   \   000000B4   0x6001             STR      R1,[R0, #+0]
     37          
     38            TIM17->CR1 = TIM_CR1_CEN      * 0   //*!<Counter enable */
     39                        | TIM_CR1_UDIS    * 0   //*!<Update disable */
     40                        | TIM_CR1_URS     * 0   //*!<Update request source */
     41                        | TIM_CR1_OPM     * 0   //*!<One pulse mode */
     42                        | TIM_CR1_ARPE    * 0   //*!<Auto-reload preload enable */
     43                        | TIM_CR1_CKD_0   * 0   //*!<Bit 0 */
     44                        | TIM_CR1_CKD_1   * 0;  //
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x....             LDR      R1,??DataTable9  ;; 0x40014800
   \   000000BA   0x8008             STRH     R0,[R1, #+0]
     45            TIM17->CR2 = TIM_CR2_CCPC     * 0   //*!<Capture/Compare Preloaded Control */
     46                        | TIM_CR2_CCUS    * 0   //*!<Capture/Compare Control Update Selection */
     47                        | TIM_CR2_CCDS    * 0   //*!<Capture/Compare DMA Selection */
     48                        | TIM_CR2_OIS1    * 0   //*!<Output Idle state 1 (OC1 output) */
     49                        | TIM_CR2_OIS1N   * 0;  //*!<Output Idle state 1 (OC1N output) */
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x....             LDR      R1,??DataTable8_7  ;; 0x40014804
   \   000000C0   0x8008             STRH     R0,[R1, #+0]
     50            TIM17->DIER = TIM_DIER_UIE    * 0   //*!<Update interrupt enable */
     51                        | TIM_DIER_CC1IE  * 0   //*!<Capture/Compare 1 interrupt enable */
     52                        | TIM_DIER_COMIE  * 0   //*!<COM interrupt enable */
     53                        | TIM_DIER_BIE    * 0   //*!<Break interrupt enable */
     54                        | TIM_DIER_UDE    * 0   //*!<Update DMA request enable */
     55                        | TIM_DIER_CC1DE  * 1;   //*!<Capture/Compare 1 DMA request enable */
   \   000000C2   0x2080             MOVS     R0,#+128
   \   000000C4   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   000000C6   0x....             LDR      R1,??DataTable8_8  ;; 0x4001480c
   \   000000C8   0x8008             STRH     R0,[R1, #+0]
     56            TIM17->SR = 0;  //*!< TIM status register, */
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x....             LDR      R1,??DataTable9_1  ;; 0x40014810
   \   000000CE   0x8008             STRH     R0,[R1, #+0]
     57            TIM17->EGR = 0; //*!< TIM event generation register, */
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x....             LDR      R1,??DataTable9_2  ;; 0x40014814
   \   000000D4   0x8008             STRH     R0,[R1, #+0]
     58            TIM17->CCMR1 = TIM_CCMR1_CC1S_0 * 0   //*!<Bit 0 00: CC1 channel is configured as output*/
     59                        | TIM_CCMR1_CC1S_1  * 0   //*!<Bit 1 */
     60                        | TIM_CCMR1_OC1FE   * 1   //*!<Output Compare 1 Fast enable */
     61                        | TIM_CCMR1_OC1PE   * 1   //*!<Output Compare 1 Preload enable */
     62                        | TIM_CCMR1_OC1M_0  * 0   //*!<Bit 0 (Output Compare 1 Mode)*/
     63                        | TIM_CCMR1_OC1M_1  * 1   //*!<Bit 1 110: PWM mode 1*/
     64                        | TIM_CCMR1_OC1M_2  * 1;  //*!<Bit 2 */
   \   000000D6   0x206C             MOVS     R0,#+108
   \   000000D8   0x....             LDR      R1,??DataTable9_3  ;; 0x40014818
   \   000000DA   0x8008             STRH     R0,[R1, #+0]
     65            TIM17->CCER = TIM_CCER_CC1E     * 1   //*!<Capture/Compare 1 output enable */
     66                        | TIM_CCER_CC1P     * 0   //*!<Capture/Compare 1 output Polarity 0: OC1 active high*/
     67                        | TIM_CCER_CC1NE    * 0   //*!<Capture/Compare 1 Complementary output enable */
     68                        | TIM_CCER_CC1NP    * 0;   //*!<Capture/Compare 1 Complementary output Polarity */
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x....             LDR      R1,??DataTable9_4  ;; 0x40014820
   \   000000E0   0x8008             STRH     R0,[R1, #+0]
     69            TIM17->CNT = 0;           //*!< TIM counter register */
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x....             LDR      R1,??DataTable9_5  ;; 0x40014824
   \   000000E6   0x6008             STR      R0,[R1, #+0]
     70            TIM17->PSC = 2;           //*!< TIM prescaler register,
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0x....             LDR      R1,??DataTable9_6  ;; 0x40014828
   \   000000EC   0x8008             STRH     R0,[R1, #+0]
     71                                      // The counter clock frequency (CK_CNT) is equal to fCK_PSC / (PSC[15:0] + 1)*/
     72            
     73            TIM17->ARR = TIM_WS_ARR;  //*!< TIM auto-reload register */
   \   000000EE   0x2015             MOVS     R0,#+21
   \   000000F0   0x....             LDR      R1,??DataTable9_7  ;; 0x4001482c
   \   000000F2   0x6008             STR      R0,[R1, #+0]
     74            TIM17->RCR = 0;           //*!< TIM  repetition counter register, */
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x....             LDR      R1,??DataTable9_8  ;; 0x40014830
   \   000000F8   0x8008             STRH     R0,[R1, #+0]
     75            TIM17->CCR1 = TIM_WS_ONE; //*!< TIM capture/compare register 1,  */
   \   000000FA   0x2012             MOVS     R0,#+18
   \   000000FC   0x....             LDR      R1,??DataTable9_9  ;; 0x40014834
   \   000000FE   0x6008             STR      R0,[R1, #+0]
     76            TIM17->BDTR = TIM_BDTR_DTG_0  * 0   //*!<Bit 0 */
     77                        | TIM_BDTR_DTG_1  * 0   //*!<Bit 1 */
     78                        | TIM_BDTR_DTG_2  * 0   //*!<Bit 2 */
     79                        | TIM_BDTR_DTG_3  * 0   //*!<Bit 3 */
     80                        | TIM_BDTR_DTG_4  * 0   //*!<Bit 4 */
     81                        | TIM_BDTR_DTG_5  * 0   //*!<Bit 5 */
     82                        | TIM_BDTR_DTG_6  * 0   //*!<Bit 6 */
     83                        | TIM_BDTR_DTG_7  * 0   //*!<Bit 7 */
     84                        | TIM_BDTR_LOCK_0 * 0   //*!<Bit 0 */
     85                        | TIM_BDTR_LOCK_1 * 0   //*!<Bit 1 */
     86                        | TIM_BDTR_OSSI   * 0   //*!<Off-State Selection for Idle mode */
     87                        | TIM_BDTR_OSSR   * 0   //*!<Off-State Selection for Run mode */
     88                        | TIM_BDTR_BKE    * 0   //*!<Break enable */
     89                        | TIM_BDTR_BKP    * 0   //*!<Break Polarity */
     90                        | TIM_BDTR_AOE    * 0   //*!<Automatic Output enable */
     91                        | TIM_BDTR_MOE    * 1;  //*!<Main Output enable */
   \   00000100   0x2080             MOVS     R0,#+128
   \   00000102   0x0200             LSLS     R0,R0,#+8        ;; #+32768
   \   00000104   0x....             LDR      R1,??DataTable9_10  ;; 0x40014844
   \   00000106   0x8008             STRH     R0,[R1, #+0]
     92            TIM17->DCR = TIM_DCR_DBA_0  * 0   //*!<Bit 0 */
     93                        | TIM_DCR_DBA_1 * 0   //*!<Bit 1 */
     94                        | TIM_DCR_DBA_2 * 0   //*!<Bit 2 */
     95                        | TIM_DCR_DBA_3 * 0   //*!<Bit 3 */
     96                        | TIM_DCR_DBA_4 * 0   //*!<Bit 4 */
     97                        | TIM_DCR_DBL_0 * 0   //*!<Bit 0 */
     98                        | TIM_DCR_DBL_1 * 0   //*!<Bit 1 */
     99                        | TIM_DCR_DBL_2 * 0   //*!<Bit 2 */
    100                        | TIM_DCR_DBL_3 * 0   //*!<Bit 3 */
    101                        | TIM_DCR_DBL_4 * 0;  //*!<Bit 4 */
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x....             LDR      R1,??DataTable9_11  ;; 0x40014848
   \   0000010C   0x8008             STRH     R0,[R1, #+0]
    102            TIM17->DMAR = 0;            /*!< TIM DMA address for full transfer register,*/
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x....             LDR      R1,??DataTable9_12  ;; 0x4001484c
   \   00000112   0x8008             STRH     R0,[R1, #+0]
    103          
    104            NVIC_SetPriority (TIM17_IRQn, (uint32_t) 0);			// установить приоритет прерывания от 0 до 3
   \   00000114   0x2100             MOVS     R1,#+0
   \   00000116   0x2016             MOVS     R0,#+22
   \   00000118   0x.... 0x....      BL       NVIC_SetPriority
    105            NVIC_EnableIRQ (TIM17_IRQn);			// разрешить прерывания от TIM17
   \   0000011C   0x2016             MOVS     R0,#+22
   \   0000011E   0x.... 0x....      BL       NVIC_EnableIRQ
    106            
    107            led_dma_init ();
   \   00000122   0x.... 0x....      BL       led_dma_init
    108            
    109            TIM17->CR1 |= TIM_CR1_CEN;
   \   00000126   0x....             LDR      R0,??DataTable9  ;; 0x40014800
   \   00000128   0x8800             LDRH     R0,[R0, #+0]
   \   0000012A   0x2101             MOVS     R1,#+1
   \   0000012C   0x4301             ORRS     R1,R1,R0
   \   0000012E   0x....             LDR      R0,??DataTable9  ;; 0x40014800
   \   00000130   0x8001             STRH     R1,[R0, #+0]
    110          
    111          }
   \   00000132   0xBD01             POP      {R0,PC}          ;; return
    112          
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void led_buffer_clear (void)
    115          {
   \                     led_buffer_clear: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    116            memset (g.led_buffer, TIM_WS_ZERO, LED_BUFER_SIZE);
   \   00000002   0x2196             MOVS     R1,#+150
   \   00000004   0x00C9             LSLS     R1,R1,#+3        ;; #+1200
   \   00000006   0x2205             MOVS     R2,#+5
   \   00000008   0x....             LDR      R4,??DataTable9_13
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
    117            for (u16 *p_buffer = g.led_buffer; p_buffer < &g.led_buffer[LED_BUFER_SIZE]; p_buffer++)
   \   00000010   0x....             LDR      R0,??DataTable9_13
   \   00000012   0xE002             B        ??led_buffer_clear_0
    118            {
    119              *p_buffer = TIM_WS_ZERO;
   \                     ??led_buffer_clear_1: (+1)
   \   00000014   0x2105             MOVS     R1,#+5
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    120            }
   \   00000018   0x1C80             ADDS     R0,R0,#+2
   \                     ??led_buffer_clear_0: (+1)
   \   0000001A   0x....             LDR      R1,??DataTable9_14
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD3F9             BCC      ??led_buffer_clear_1
    121          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    122          
    123          
    124          /*******************************************************************************
    125          * заполнение буфера таймера
    126          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    127          void led_buffer_set (color_t *stripe)
    128          {
   \                     led_buffer_set: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    129            u16 *p_buffer = g.led_buffer;
   \   00000004   0x....             LDR      R5,??DataTable9_13
    130            u8 data;
    131            u8 mask;
    132            s16 pixel;
    133            
    134            for (pixel = 0; pixel < LED_COUNT; pixel++)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xE000             B        ??led_buffer_set_0
   \                     ??led_buffer_set_1: (+1)
   \   0000000A   0x1C76             ADDS     R6,R6,#+1
   \                     ??led_buffer_set_0: (+1)
   \   0000000C   0x0030             MOVS     R0,R6
   \   0000000E   0xB200             SXTH     R0,R0
   \   00000010   0x2832             CMP      R0,#+50
   \   00000012   0xDA4C             BGE      ??led_buffer_set_2
    135            {
    136              data = gamma_corr (stripe[pixel].r);
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0xB200             SXTH     R0,R0
   \   00000018   0x2103             MOVS     R1,#+3
   \   0000001A   0x4341             MULS     R1,R0,R1
   \   0000001C   0x5C60             LDRB     R0,[R4, R1]
   \   0000001E   0x.... 0x....      BL       gamma_corr
    137              for (mask = 0x80; mask > 0; mask >>= 1) 
   \   00000022   0x2180             MOVS     R1,#+128
   \   00000024   0xE00B             B        ??led_buffer_set_3
    138              {
    139                if (data & mask)
    140                {
    141                  *p_buffer = TIM_WS_ONE;
    142                }
    143                else
    144                {
    145                  *p_buffer = TIM_WS_ZERO;
   \                     ??led_buffer_set_4: (+1)
   \   00000026   0x2205             MOVS     R2,#+5
   \   00000028   0x802A             STRH     R2,[R5, #+0]
   \   0000002A   0xE005             B        ??led_buffer_set_5
    146                }
   \                     ??led_buffer_set_6: (+1)
   \   0000002C   0x0002             MOVS     R2,R0
   \   0000002E   0xB2D2             UXTB     R2,R2
   \   00000030   0x420A             TST      R2,R1
   \   00000032   0xD0F8             BEQ      ??led_buffer_set_4
   \   00000034   0x2212             MOVS     R2,#+18
   \   00000036   0x802A             STRH     R2,[R5, #+0]
    147                p_buffer++;
   \                     ??led_buffer_set_5: (+1)
   \   00000038   0x1CAD             ADDS     R5,R5,#+2
    148              }
   \   0000003A   0xB2C9             UXTB     R1,R1
   \   0000003C   0x0849             LSRS     R1,R1,#+1
   \                     ??led_buffer_set_3: (+1)
   \   0000003E   0x000A             MOVS     R2,R1
   \   00000040   0xB2D2             UXTB     R2,R2
   \   00000042   0x2A00             CMP      R2,#+0
   \   00000044   0xD1F2             BNE      ??led_buffer_set_6
    149              data = gamma_corr (stripe[pixel].g);
   \                     ??led_buffer_set_7: (+1)
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0xB200             SXTH     R0,R0
   \   0000004A   0x2103             MOVS     R1,#+3
   \   0000004C   0x4341             MULS     R1,R0,R1
   \   0000004E   0x1860             ADDS     R0,R4,R1
   \   00000050   0x7840             LDRB     R0,[R0, #+1]
   \   00000052   0x.... 0x....      BL       gamma_corr
    150              for (mask = 0x80; mask > 0; mask >>= 1) 
   \   00000056   0x2180             MOVS     R1,#+128
   \   00000058   0xE00B             B        ??led_buffer_set_8
    151              {
    152                *p_buffer++ = (data & mask) ? TIM_WS_ONE : TIM_WS_ZERO;
   \                     ??led_buffer_set_9: (+1)
   \   0000005A   0x2205             MOVS     R2,#+5
   \   0000005C   0xE006             B        ??led_buffer_set_10
   \                     ??led_buffer_set_11: (+1)
   \   0000005E   0x002B             MOVS     R3,R5
   \   00000060   0x1C9D             ADDS     R5,R3,#+2
   \   00000062   0x0002             MOVS     R2,R0
   \   00000064   0xB2D2             UXTB     R2,R2
   \   00000066   0x420A             TST      R2,R1
   \   00000068   0xD0F7             BEQ      ??led_buffer_set_9
   \   0000006A   0x2212             MOVS     R2,#+18
   \                     ??led_buffer_set_10: (+1)
   \   0000006C   0x801A             STRH     R2,[R3, #+0]
    153              }
   \   0000006E   0xB2C9             UXTB     R1,R1
   \   00000070   0x0849             LSRS     R1,R1,#+1
   \                     ??led_buffer_set_8: (+1)
   \   00000072   0x000A             MOVS     R2,R1
   \   00000074   0xB2D2             UXTB     R2,R2
   \   00000076   0x2A00             CMP      R2,#+0
   \   00000078   0xD1F1             BNE      ??led_buffer_set_11
    154              data = gamma_corr (stripe[pixel].b);
   \                     ??led_buffer_set_12: (+1)
   \   0000007A   0x0030             MOVS     R0,R6
   \   0000007C   0xB200             SXTH     R0,R0
   \   0000007E   0x2103             MOVS     R1,#+3
   \   00000080   0x4341             MULS     R1,R0,R1
   \   00000082   0x1860             ADDS     R0,R4,R1
   \   00000084   0x7880             LDRB     R0,[R0, #+2]
   \   00000086   0x.... 0x....      BL       gamma_corr
    155              for (mask = 0x80; mask > 0; mask >>= 1) 
   \   0000008A   0x2180             MOVS     R1,#+128
   \                     ??led_buffer_set_13: (+1)
   \   0000008C   0x000A             MOVS     R2,R1
   \   0000008E   0xB2D2             UXTB     R2,R2
   \   00000090   0x2A00             CMP      R2,#+0
   \   00000092   0xD0BA             BEQ      ??led_buffer_set_1
    156              {
    157                *p_buffer++ = (data & mask) ? TIM_WS_ONE : TIM_WS_ZERO;
   \   00000094   0x002B             MOVS     R3,R5
   \   00000096   0x1C9D             ADDS     R5,R3,#+2
   \   00000098   0x0002             MOVS     R2,R0
   \   0000009A   0xB2D2             UXTB     R2,R2
   \   0000009C   0x420A             TST      R2,R1
   \   0000009E   0xD101             BNE      ??led_buffer_set_14
   \                     ??led_buffer_set_15: (+1)
   \   000000A0   0x2205             MOVS     R2,#+5
   \   000000A2   0xE000             B        ??led_buffer_set_16
   \                     ??led_buffer_set_14: (+1)
   \   000000A4   0x2212             MOVS     R2,#+18
   \                     ??led_buffer_set_16: (+1)
   \   000000A6   0x801A             STRH     R2,[R3, #+0]
    158              }
   \   000000A8   0xB2C9             UXTB     R1,R1
   \   000000AA   0x0849             LSRS     R1,R1,#+1
   \   000000AC   0xE7EE             B        ??led_buffer_set_13
    159            }
    160            *p_buffer = TIM_WS_RESET;  // формирование сброса "0" для следующего блока данных
   \                     ??led_buffer_set_2: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x8028             STRH     R0,[R5, #+0]
    161          //  g.led_buffer[LED_BUFER_SIZE] = TIM_WS_RESET;  // формирование сброса "0" для следующего блока данных
    162          }
   \   000000B2   0xBD70             POP      {R4-R6,PC}       ;; return
    163          
    164          
    165          /*******************************************************************************
    166          * гамма коррекция цветов (квадратичная)
    167          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    168          u8 gamma_corr (u8 input)
    169          {
    170            u8 result = input;  //((u32)input * (u32)input) / (u32)255;
    171            return result;
   \                     gamma_corr: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0
   \   00000002   0x4770             BX       LR               ;; return
    172          }
    173          
    174          /*******************************************************************************
    175          * Очистка буфера RGB
    176          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    177          void stripe_clear (void)
    178          {
   \                     stripe_clear: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    179            memset (g.stripe, 0, sizeof(g.stripe));
   \   00000002   0x2196             MOVS     R1,#+150
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR      R4,??DataTable9_15
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       __aeabi_memset
    180          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    181          
    182          /*******************************************************************************
    183          * Один раз заполнение тестовым паттерном
    184          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    185          void stripe_test (void)
    186          {
    187           /* static color_t pattern[8] = 
    188            {
    189              255, 0, 0,
    190              64, 0, 0,
    191              10, 0, 0,
    192              0, 255, 0,
    193              0, 64, 64,
    194              0, 0, 255,
    195              40, 40, 40,
    196              255, 255, 255
    197            };
    198            u8 n = 0;
    199            
    200            for (u8 led = 0; led < LED_COUNT; led++)
    201            {
    202              g.stripe[led] = pattern[n++];
    203              if (n >= 8)
    204              {
    205                n = 0;
    206              }
    207            }
    208          */}
   \                     stripe_test: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    209          
    210          //#pragma call_graph_root="interrupt"         // interrupt category
    211          //void TIM17_IRQHandler (void)
    212          //{
    213          //  TIM17->SR = 0;  // сбросить флаги прерываний
    214          //  TIM17->CCR1 = *p_buf;
    215          //  p_buf++;
    216          //  if (p_buf > (g.led_buffer + LED_BUFER_SIZE))
    217          //  {
    218          //    TIM17->CCR1 = TIM_WS_RESET;
    219          //    TIM17->DIER = 0;
    220          //  }
    221          //}
    222          

   \                                 In section .text, align 2, keep-with-next
    223          void led_dma_init (void)
    224          {
   \                     led_dma_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    225            RCC->AHBENR |= RCC_AHBENR_DMA1EN;
   \   00000002   0x....             LDR      R0,??DataTable8_1  ;; 0x40021014
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable8_1  ;; 0x40021014
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    226            
    227            DMA1->IFCR = 0xFFFFFFFF;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000012   0x....             LDR      R1,??DataTable9_16  ;; 0x40020004
   \   00000014   0x6008             STR      R0,[R1, #+0]
    228            
    229            DMA1_Channel1->CCR = DMA_CCR_EN     * 0 //*!< Channel enable                      */
    230                              | DMA_CCR_TCIE    * 1 //*!< Transfer complete interrupt enable  */
    231                              | DMA_CCR_HTIE    * 0 //*!< Half Transfer interrupt enable      */
    232                              | DMA_CCR_TEIE    * 0 //*!< Transfer error interrupt enable     */
    233                              | DMA_CCR_DIR     * 1 //*!< Data transfer direction 1: Read from memory*/
    234                              | DMA_CCR_CIRC    * 0 //*!< Circular mode                       */
    235                              | DMA_CCR_PINC    * 0 //*!< Peripheral increment mode           */
    236                              | DMA_CCR_MINC    * 1 //*!< Memory increment mode               */
    237                              | DMA_CCR_PSIZE_0 * 1 //*!< Bit 0  PSIZE[1:0] bits              */
    238                              | DMA_CCR_PSIZE_1 * 0 //*!< Bit 1 01: 16-bits                    */
    239                              | DMA_CCR_MSIZE_0 * 1 //*!< Bit 0 MSIZE[1:0] bits               */
    240                              | DMA_CCR_MSIZE_1 * 0 //*!< Bit 1 01: 16-bits                    */
    241                              | DMA_CCR_PL_0    * 1 //*!< Bit 0 PL[1:0] bits                  */
    242                              | DMA_CCR_PL_1    * 1 //*!< Bit 1 11: Very high                 */
    243                              | DMA_CCR_MEM2MEM * 0; //*!< Memory to memory mode              */
   \   00000016   0x....             LDR      R0,??DataTable9_17  ;; 0x3592
   \   00000018   0x....             LDR      R1,??DataTable9_18  ;; 0x40020008
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    244            DMA1_Channel1->CNDTR = LED_BUFER_SIZE + 1;
   \   0000001C   0x....             LDR      R0,??DataTable9_19  ;; 0x4b1
   \   0000001E   0x....             LDR      R1,??DataTable9_20  ;; 0x4002000c
   \   00000020   0x6008             STR      R0,[R1, #+0]
    245            DMA1_Channel1->CPAR = (u32)&TIM17->CCR1 + 1;
   \   00000022   0x....             LDR      R0,??DataTable9_21  ;; 0x40014835
   \   00000024   0x....             LDR      R1,??DataTable9_22  ;; 0x40020010
   \   00000026   0x6008             STR      R0,[R1, #+0]
    246            DMA1_Channel1->CMAR = (u32)g.led_buffer;
   \   00000028   0x....             LDR      R0,??DataTable9_13
   \   0000002A   0x....             LDR      R1,??DataTable9_23  ;; 0x40020014
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    247          
    248            NVIC_SetPriority (DMA1_Channel1_IRQn, (uint32_t) 1);			// установить приоритет прерывания от 0 до 3
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x2009             MOVS     R0,#+9
   \   00000032   0x.... 0x....      BL       NVIC_SetPriority
    249            NVIC_EnableIRQ (DMA1_Channel1_IRQn);			// разрешить прерывания от DMA1_Channel1
   \   00000036   0x2009             MOVS     R0,#+9
   \   00000038   0x.... 0x....      BL       NVIC_EnableIRQ
    250            
    251            DMA1_Channel1->CCR |= DMA_CCR_EN; //*!< Channel enable     
   \   0000003C   0x....             LDR      R0,??DataTable9_18  ;; 0x40020008
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x4301             ORRS     R1,R1,R0
   \   00000044   0x....             LDR      R0,??DataTable9_18  ;; 0x40020008
   \   00000046   0x6001             STR      R1,[R0, #+0]
    252          }
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    253          
    254          #pragma call_graph_root="interrupt"         // interrupt category

   \                                 In section .text, align 2, keep-with-next
    255          void DMA1_Channel1_IRQHandler (void)
    256          {
   \                     DMA1_Channel1_IRQHandler: (+1)
   \   00000000   0xB500             PUSH     {LR}
    257            if (DMA1->ISR & DMA_ISR_TCIF1)
   \   00000002   0x....             LDR      R0,??DataTable9_24  ;; 0x40020000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0780             LSLS     R0,R0,#+30
   \   00000008   0xD508             BPL      ??DMA1_Channel1_IRQHandler_0
    258            {
    259              TIM17->DIER = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR      R1,??DataTable8_8  ;; 0x4001480c
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    260              DMA1_Channel1->CCR &= ~DMA_CCR_EN; //*!< Channel disable 
   \   00000010   0x....             LDR      R0,??DataTable9_18  ;; 0x40020008
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x4388             BICS     R0,R0,R1
   \   00000018   0x....             LDR      R1,??DataTable9_18  ;; 0x40020008
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    261            }
    262            DMA1->IFCR = DMA_IFCR_CGIF1   * 1 /*!< Channel 1 Global interrupt clear    */
    263                        | DMA_IFCR_CTCIF1 * 1 /*!< Channel 1 Transfer Complete clear   */
    264                        | DMA_IFCR_CHTIF1 * 1 /*!< Channel 1 Half Transfer clear       */
    265                        | DMA_IFCR_CTEIF1 * 1;/*!< Channel 1 Transfer Error clear      */
   \                     ??DMA1_Channel1_IRQHandler_0: (+1)
   \   0000001C   0x200F             MOVS     R0,#+15
   \   0000001E   0x....             LDR      R1,??DataTable9_16  ;; 0x40020004
   \   00000020   0x6008             STR      R0,[R1, #+0]
    266          }
   \   00000022   0xBD00             POP      {PC}             ;; return
    267          
    268          
    269          /*******************************************************************************
    270          *
    271          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    272          void led_buffer_proc (void)
    273          {
   \                     led_buffer_proc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    274            static u32 led_buffer_timer;
    275            
    276            if (timer_end (&led_buffer_timer, 20))  // 50 раз в секунду
   \   00000002   0x2114             MOVS     R1,#+20
   \   00000004   0x....             LDR      R0,??DataTable9_25
   \   00000006   0x.... 0x....      BL       timer_end
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD018             BEQ      ??led_buffer_proc_0
    277            {
    278              timer_reset (&led_buffer_timer);
   \   0000000E   0x....             LDR      R0,??DataTable9_25
   \   00000010   0x.... 0x....      BL       timer_reset
    279              
    280              led_buffer_set (g.stripe);
   \   00000014   0x....             LDR      R0,??DataTable9_15
   \   00000016   0x.... 0x....      BL       led_buffer_set
    281              
    282              DMA1_Channel1->CNDTR = LED_BUFER_SIZE + 1;
   \   0000001A   0x....             LDR      R0,??DataTable9_19  ;; 0x4b1
   \   0000001C   0x....             LDR      R1,??DataTable9_20  ;; 0x4002000c
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    283              DMA1_Channel1->CCR |= DMA_CCR_EN; //*!< Channel enable 
   \   00000020   0x....             LDR      R0,??DataTable9_18  ;; 0x40020008
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x4301             ORRS     R1,R1,R0
   \   00000028   0x....             LDR      R0,??DataTable9_18  ;; 0x40020008
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    284          
    285              TIM17->DIER |= TIM_DIER_CC1DE;
   \   0000002C   0x....             LDR      R0,??DataTable9_26  ;; 0x4001480c
   \   0000002E   0x8800             LDRH     R0,[R0, #+0]
   \   00000030   0x2180             MOVS     R1,#+128
   \   00000032   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   00000034   0x4301             ORRS     R1,R1,R0
   \   00000036   0x....             LDR      R0,??DataTable9_26  ;; 0x4001480c
   \   00000038   0x8001             STRH     R1,[R0, #+0]
    286              
    287              send_message (M_START_CALC);
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       send_message
    288            }  
    289          }
   \                     ??led_buffer_proc_0: (+1)
   \   00000040   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `led_buffer_proc::led_buffer_timer`:
   \   00000000                      DS8 4
    290          
    291          

   \                                 In section .text, align 2, keep-with-next
    292          void add_color (color_t *result, color_t *first, color_t *second)
    293          {
   \                     add_color: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    294            s32 temp;
    295            temp = first->r + second->r;
   \   00000002   0x780B             LDRB     R3,[R1, #+0]
   \   00000004   0x7814             LDRB     R4,[R2, #+0]
   \   00000006   0x191B             ADDS     R3,R3,R4
    296            if (temp > 255) temp = 255;
   \   00000008   0x2BFF             CMP      R3,#+255
   \   0000000A   0xDD00             BLE      ??add_color_0
   \   0000000C   0x23FF             MOVS     R3,#+255
    297            result->r = temp;
   \                     ??add_color_0: (+1)
   \   0000000E   0x7003             STRB     R3,[R0, #+0]
    298            temp = first->g + second->g;
   \   00000010   0x784B             LDRB     R3,[R1, #+1]
   \   00000012   0x7854             LDRB     R4,[R2, #+1]
   \   00000014   0x191B             ADDS     R3,R3,R4
    299            if (temp > 255) temp = 255;
   \   00000016   0x2BFF             CMP      R3,#+255
   \   00000018   0xDD00             BLE      ??add_color_1
   \   0000001A   0x23FF             MOVS     R3,#+255
    300            result->g = temp;
   \                     ??add_color_1: (+1)
   \   0000001C   0x7043             STRB     R3,[R0, #+1]
    301            temp = first->b + second->b;
   \   0000001E   0x7889             LDRB     R1,[R1, #+2]
   \   00000020   0x7892             LDRB     R2,[R2, #+2]
   \   00000022   0x1889             ADDS     R1,R1,R2
    302            if (temp > 255) temp = 255;
   \   00000024   0x29FF             CMP      R1,#+255
   \   00000026   0xDD00             BLE      ??add_color_2
   \   00000028   0x21FF             MOVS     R1,#+255
    303            result->b = temp;
   \                     ??add_color_2: (+1)
   \   0000002A   0x7081             STRB     R1,[R0, #+2]
    304          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    305          

   \                                 In section .text, align 2, keep-with-next
    306          void sub_color (color_t *result, color_t *first, color_t *second)
    307          {
   \                     sub_color: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    308            s32 temp;
    309            temp = first->r - second->r;
   \   00000002   0x780B             LDRB     R3,[R1, #+0]
   \   00000004   0x7814             LDRB     R4,[R2, #+0]
   \   00000006   0x1B1B             SUBS     R3,R3,R4
    310            if (temp < 0) temp = 0;
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD500             BPL      ??sub_color_0
   \   0000000C   0x2300             MOVS     R3,#+0
    311            result->r = temp;
   \                     ??sub_color_0: (+1)
   \   0000000E   0x7003             STRB     R3,[R0, #+0]
    312            temp = first->g - second->g;
   \   00000010   0x784B             LDRB     R3,[R1, #+1]
   \   00000012   0x7854             LDRB     R4,[R2, #+1]
   \   00000014   0x1B1B             SUBS     R3,R3,R4
    313            if (temp < 0) temp = 0;
   \   00000016   0x2B00             CMP      R3,#+0
   \   00000018   0xD500             BPL      ??sub_color_1
   \   0000001A   0x2300             MOVS     R3,#+0
    314            result->g = temp;
   \                     ??sub_color_1: (+1)
   \   0000001C   0x7043             STRB     R3,[R0, #+1]
    315            temp = first->b - second->b;
   \   0000001E   0x7889             LDRB     R1,[R1, #+2]
   \   00000020   0x7892             LDRB     R2,[R2, #+2]
   \   00000022   0x1A89             SUBS     R1,R1,R2
    316            if (temp < 0) temp = 0;
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD500             BPL      ??sub_color_2
   \   00000028   0x2100             MOVS     R1,#+0
    317            result->b = temp;
   \                     ??sub_color_2: (+1)
   \   0000002A   0x7081             STRB     R1,[R0, #+2]
    318          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0xE000ED1C         DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x48001400         DC32     0x48001400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0xFFFFFCFF         DC32     0xfffffcff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x48001404         DC32     0x48001404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x0000FFEF         DC32     0xffef

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x48001408         DC32     0x48001408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4800140C         DC32     0x4800140c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     system_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x48000400         DC32     0x48000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0xFFF3FFFF         DC32     0xfff3ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x48000404         DC32     0x48000404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x48000408         DC32     0x48000408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x40021014         DC32     0x40021014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4800040C         DC32     0x4800040c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x48000414         DC32     0x48000414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x0000FDFF         DC32     0xfdff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x48000424         DC32     0x48000424

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x40014804         DC32     0x40014804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x4001480C         DC32     0x4001480c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x40014800         DC32     0x40014800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x40014810         DC32     0x40014810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x40014814         DC32     0x40014814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x40014818         DC32     0x40014818

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x40014820         DC32     0x40014820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x40014824         DC32     0x40014824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x40014828         DC32     0x40014828

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x4001482C         DC32     0x4001482c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x40014830         DC32     0x40014830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x40014834         DC32     0x40014834

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x40014844         DC32     0x40014844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x40014848         DC32     0x40014848

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x4001484C         DC32     0x4001484c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     g

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x........         DC32     g+0x960

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   0x........         DC32     g+0x962

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_17:
   \   00000000   0x00003592         DC32     0x3592

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_18:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_19:
   \   00000000   0x000004B1         DC32     0x4b1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_20:
   \   00000000   0x4002000C         DC32     0x4002000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_21:
   \   00000000   0x40014835         DC32     0x40014835

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_22:
   \   00000000   0x40020010         DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_23:
   \   00000000   0x40020014         DC32     0x40020014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_24:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_25:
   \   00000000   0x........         DC32     `led_buffer_proc::led_buffer_timer`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_26:
   \   00000000   0x4001480C         DC32     0x4001480c
    319          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   DMA1_Channel1_IRQHandler
       0   NVIC_EnableIRQ
      20   NVIC_SetPriority
       8   add_color
       0   gamma_corr
       8   init_ws2811_pin
         8   -> NVIC_EnableIRQ
         8   -> NVIC_SetPriority
         8   -> led_dma_init
       8   led_buffer_clear
         8   -> __aeabi_memset
       8   led_buffer_proc
         8   -> led_buffer_set
         8   -> send_message
         8   -> timer_end
         8   -> timer_reset
      16   led_buffer_set
        16   -> gamma_corr
       8   led_dma_init
         8   -> NVIC_EnableIRQ
         8   -> NVIC_SetPriority
       4   send_message
       8   stripe_clear
         8   -> __aeabi_memset
       0   stripe_test
       8   sub_color
       0   system_time
      16   timer_end
        16   -> system_time
       8   timer_reset
         8   -> system_time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_19
       4  ??DataTable9_2
       4  ??DataTable9_20
       4  ??DataTable9_21
       4  ??DataTable9_22
       4  ??DataTable9_23
       4  ??DataTable9_24
       4  ??DataTable9_25
       4  ??DataTable9_26
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      36  DMA1_Channel1_IRQHandler
      14  NVIC_EnableIRQ
     140  NVIC_SetPriority
      46  add_color
       4  gamma_corr
     308  init_ws2811_pin
      34  led_buffer_clear
      66  led_buffer_proc
     180  led_buffer_set
       4  led_buffer_timer
      74  led_dma_init
      28  send_message
      16  stripe_clear
       2  stripe_test
      46  sub_color
       6  system_time
      28  timer_end
      12  timer_reset

 
     4 bytes in section .bss
 1 236 bytes in section .text
 
 1 208 bytes of CODE memory (+ 28 bytes shared)
     4 bytes of DATA memory

Errors: none
Warnings: none
