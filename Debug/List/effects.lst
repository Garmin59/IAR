###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.2.14835/W32 for ARM       05/Jan/2018  18:41:09
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Ilya\Projects\332 WS2811 hew year light\IAR\project\effects.c
#    Command line =  
#        -f C:\Users\75BD~1\AppData\Local\Temp\EW2092.tmp
#        ("D:\Ilya\Projects\332 WS2811 hew year light\IAR\project\effects.c" -D
#        STM32F0XX -D STM32F051 --preprocess=c "D:\Ilya\Projects\332 WS2811 hew
#        year light\IAR\Debug\List" -lC "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\Debug\List" -o "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I "D:\Ilya\Projects\332 WS2811
#        hew year light\IAR\system\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\project\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\CMSIS\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\CMSIS\inc\" -I "D:\Ilya\Projects\332 WS2811 hew year
#        light\IAR\" -Ol --use_c++_inline --relaxed_fp --source_encoding locale
#        --text_out locale)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Ilya\Projects\332 WS2811 hew year light\IAR\Debug\List\effects.lst
#    Object file  =  
#        D:\Ilya\Projects\332 WS2811 hew year light\IAR\Debug\Obj\effects.o
#
###############################################################################

D:\Ilya\Projects\332 WS2811 hew year light\IAR\project\effects.c
      1          // file effects.c
      2          
      3          #include  <string.h>
      4          #include	"stm32f0xx.h"				// определения регистров и битовых переменных
      5          #include	"core_cm0.h"				// определения инлайнов
      6          #include	"stm32f051_it.h"    // системное время и таймеры

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t system_time(void)
   \                     system_time: (+1)
   \   00000000   0x....             LDR      R0,??DataTable1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void timer_reset(uint32_t *)
   \                     timer_reset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       system_time
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp bool timer_end(uint32_t *, uint32_t)
   \                     timer_end: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x.... 0x....      BL       system_time
   \   0000000A   0x6829             LDR      R1,[R5, #+0]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0x42A0             CMP      R0,R4
   \   00000010   0xD301             BCC      ??timer_end_0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE000             B        ??timer_end_1
   \                     ??timer_end_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??timer_end_1: (+1)
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
      7          #include 	"messages.h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool get_message(u8)
   \                     get_message: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x4904             LDR      R1,??get_message_0
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x5C08             LDRB     R0,[R1, R0]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD101             BNE      ??get_message_1
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE000             B        ??get_message_2
   \                     ??get_message_1: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??get_message_2: (+1)
   \   00000012   0xBD00             POP      {PC}             ;; return
   \                     ??get_message_0:
   \   00000014   0x........         DC32     p
      8          #include 	"effects.h"
      9          #include	"ws2811.h"	
     10          
     11          #include	"global.h"					// глобальные переменные
     12          
     13          

   \                                 In section .bss, align 4
     14          static pixel_t  layer[NUM_LAYERS][LED_COUNT];
   \                     layer:
   \   00000000                      DS8 3000
     15          
     16          
     17          void effect1          (void);
     18          void effect2          (void);
     19          void pixel_init       (pixel_t* layer);
     20          void light_shadow     (pixel_t *layer, light_t *light);
     21          void set_status_pixel (pixel_t *pixel, s32 pos, light_t *light);
     22          void proc_pixel       (pixel_t *pixel);
     23          void light_moving	    (light_t* light);
     24          void sum_layers       (void);
     25          // эффекты
     26          void light_eff_reverse (eff_struct *eff);
     27          void light_eff_up      (eff_struct *eff);
     28          
     29          /*******************************************************************************
     30          * Программа эффектов
     31          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     32          void effects_proc (void)
     33          {
   \                     effects_proc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     34            if (get_message (M_START_CALC)) // каждые 20 мс после вывода в массив таймера
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       get_message
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD001             BEQ      ??effects_proc_0
     35            {
     36              effect2 ();
   \   0000000C   0x.... 0x....      BL       effect2
     37            }
     38            sum_layers ();
   \                     ??effects_proc_0: (+1)
   \   00000010   0x.... 0x....      BL       sum_layers
     39          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     40          
     41          /*******************************************************************************
     42          * суммирование слоёв в одну RGB ленту
     43          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     44          void sum_layers (void)
     45          {
   \                     sum_layers: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     46            s32 i;
     47            s32 n;
     48            color_t *layer_rgb;
     49            color_t *stripe_rgb;
     50            
     51            stripe_clear ();
   \   00000002   0x.... 0x....      BL       stripe_clear
     52            
     53            for (i = 0; i < NUM_LAYERS; i++)  // для всех слоёв
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE01E             B        ??sum_layers_0
     54            {
     55              for (n = 0; n < LED_COUNT; n++)
     56              {
     57                layer_rgb = &layer[i][n].color;
   \                     ??sum_layers_1: (+1)
   \   0000000A   0x....             LDR      R2,??DataTable2
   \   0000000C   0x23FA             MOVS     R3,#+250
   \   0000000E   0x009B             LSLS     R3,R3,#+2        ;; #+1000
   \   00000010   0x4343             MULS     R3,R0,R3
   \   00000012   0x18D2             ADDS     R2,R2,R3
   \   00000014   0x2314             MOVS     R3,#+20
   \   00000016   0x434B             MULS     R3,R1,R3
   \   00000018   0x18D2             ADDS     R2,R2,R3
   \   0000001A   0x1CD2             ADDS     R2,R2,#+3
     58                stripe_rgb = &g.stripe[n];
   \   0000001C   0x....             LDR      R3,??DataTable2_1
   \   0000001E   0x2403             MOVS     R4,#+3
   \   00000020   0x434C             MULS     R4,R1,R4
   \   00000022   0x191B             ADDS     R3,R3,R4
   \   00000024   0x....             LDR      R4,??DataTable2_2  ;; 0x962
   \   00000026   0x191B             ADDS     R3,R3,R4
     59                stripe_rgb->r |= layer_rgb->r;
   \   00000028   0x781C             LDRB     R4,[R3, #+0]
   \   0000002A   0x7815             LDRB     R5,[R2, #+0]
   \   0000002C   0x4325             ORRS     R5,R5,R4
   \   0000002E   0x701D             STRB     R5,[R3, #+0]
     60                stripe_rgb->g |= layer_rgb->g;
   \   00000030   0x785C             LDRB     R4,[R3, #+1]
   \   00000032   0x7855             LDRB     R5,[R2, #+1]
   \   00000034   0x4325             ORRS     R5,R5,R4
   \   00000036   0x705D             STRB     R5,[R3, #+1]
     61                stripe_rgb->b |= layer_rgb->b;      
   \   00000038   0x789C             LDRB     R4,[R3, #+2]
   \   0000003A   0x7892             LDRB     R2,[R2, #+2]
   \   0000003C   0x4322             ORRS     R2,R2,R4
   \   0000003E   0x709A             STRB     R2,[R3, #+2]
     62              }
   \   00000040   0x1C49             ADDS     R1,R1,#+1
   \                     ??sum_layers_2: (+1)
   \   00000042   0x2932             CMP      R1,#+50
   \   00000044   0xDBE1             BLT      ??sum_layers_1
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \                     ??sum_layers_0: (+1)
   \   00000048   0x2803             CMP      R0,#+3
   \   0000004A   0xDA01             BGE      ??sum_layers_3
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xE7F8             B        ??sum_layers_2
     63            }
     64          }
   \                     ??sum_layers_3: (+1)
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     65          
     66          /*******************************************************************************
     67          * отражение огонька на ленту
     68          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     69          void light_shadow (pixel_t *layer, light_t *light)
     70          {
   \                     light_shadow: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
     71            pixel_t *pixel;
     72            color_t *color;
     73            color_t *pattern;
     74            s16 i;
     75            s16 n;
     76            s16 start;
     77            s16 end;
     78            
     79            for (i = 0; i < LED_COUNT; i++) // для всех пикселей в ленте
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xE044             B        ??light_shadow_0
     80            {
     81            // установка статуса пикселя (что с ним делать)
     82              pixel = &layer[i];
     83              start = light->position;
     84              end = light->position + light->size;
     85              if ((i >= start) && (i < end))  // если пиксель внутри светлячка (загораемся) - установить статус и цвет
     86              {
     87                pixel->status = P_STAT_ON;  // внутри светлячка - включено
     88                pixel->light = light;				// устанавливаем ссылку на свой светлячок
     89                
     90                pattern = light->pattern;
     91                n = i - light->position;
     92                color = &pattern[n];
     93                pixel->set.r = color->r;  // копируем установки цвета пикселя
     94                pixel->set.g = color->g;
     95                pixel->set.b = color->b;
     96                pixel->delta.r = (pixel->set.r - pixel->color.r) * light->d_on / 255; // шаг изменения
     97                if (!pixel->delta.r) pixel->delta.r = 1;                              // обязательно больше нуля
     98                pixel->delta.g = (pixel->set.g - pixel->color.g) * light->d_on / 255;
     99                if (!pixel->delta.g) pixel->delta.g = 1;
    100                pixel->delta.b = (pixel->set.b - pixel->color.b) * light->d_on / 255;
    101                if (!pixel->delta.b) pixel->delta.b = 1;
    102              }
    103              else if ((pixel->light == light)          // если свой пиксель и снаружи светлячка (гаснем)
    104                      && (pixel->status == P_STAT_ON))  // и пока не обработан
    105              {
    106                if ((pixel->color.r != light->back.r)   // если цвет пикселя не равен цвету фона
    107                  || (pixel->color.g != light->back.g)
    108                  || (pixel->color.b != light->back.b))
    109                {
    110                  pixel->status = P_STAT_OFF;           // снаружи светлячка - установить погасание
    111          
    112                  pixel->delta.r = (pixel->color.r - light->back.r) * light->d_off / 255; // шаг изменения
    113                  if (!pixel->delta.r) pixel->delta.r = 1;                                // тоже больше нуля
    114                  pixel->delta.g = (pixel->color.g - light->back.g) * light->d_off / 255;
    115                  if (!pixel->delta.g) pixel->delta.g = 1;
    116                  pixel->delta.b = (pixel->color.b - light->back.b) * light->d_off / 255;
    117                  if (!pixel->delta.b) pixel->delta.b = 1;
    118                }
    119                else                            // если цвет пикселя равен цвету фона
    120                {
    121                  pixel->status = P_STAT_EMPTY; // установить статус - пустой, ничего не делать
   \                     ??light_shadow_1: (+1)
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x7278             STRB     R0,[R7, #+9]
   \   0000000E   0xE03D             B        ??light_shadow_2
    122                }
   \                     ??light_shadow_3: (+1)
   \   00000010   0x68F8             LDR      R0,[R7, #+12]
   \   00000012   0x42A0             CMP      R0,R4
   \   00000014   0xD13A             BNE      ??light_shadow_2
   \   00000016   0x7A78             LDRB     R0,[R7, #+9]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD137             BNE      ??light_shadow_2
   \   0000001C   0x78F8             LDRB     R0,[R7, #+3]
   \   0000001E   0x7921             LDRB     R1,[R4, #+4]
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD107             BNE      ??light_shadow_4
   \   00000024   0x7938             LDRB     R0,[R7, #+4]
   \   00000026   0x7961             LDRB     R1,[R4, #+5]
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD103             BNE      ??light_shadow_4
   \   0000002C   0x7978             LDRB     R0,[R7, #+5]
   \   0000002E   0x79A1             LDRB     R1,[R4, #+6]
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD0EA             BEQ      ??light_shadow_1
   \                     ??light_shadow_4: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x7278             STRB     R0,[R7, #+9]
   \   00000038   0x78F8             LDRB     R0,[R7, #+3]
   \   0000003A   0x7921             LDRB     R1,[R4, #+4]
   \   0000003C   0x1A40             SUBS     R0,R0,R1
   \   0000003E   0x7BA1             LDRB     R1,[R4, #+14]
   \   00000040   0x4348             MULS     R0,R1,R0
   \   00000042   0x21FF             MOVS     R1,#+255
   \   00000044   0x.... 0x....      BL       __aeabi_idiv
   \   00000048   0x71B8             STRB     R0,[R7, #+6]
   \   0000004A   0x79B8             LDRB     R0,[R7, #+6]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD101             BNE      ??light_shadow_5
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x71B8             STRB     R0,[R7, #+6]
   \                     ??light_shadow_5: (+1)
   \   00000054   0x7938             LDRB     R0,[R7, #+4]
   \   00000056   0x7961             LDRB     R1,[R4, #+5]
   \   00000058   0x1A40             SUBS     R0,R0,R1
   \   0000005A   0x7BA1             LDRB     R1,[R4, #+14]
   \   0000005C   0x4348             MULS     R0,R1,R0
   \   0000005E   0x21FF             MOVS     R1,#+255
   \   00000060   0x.... 0x....      BL       __aeabi_idiv
   \   00000064   0x71F8             STRB     R0,[R7, #+7]
   \   00000066   0x79F8             LDRB     R0,[R7, #+7]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD101             BNE      ??light_shadow_6
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x71F8             STRB     R0,[R7, #+7]
   \                     ??light_shadow_6: (+1)
   \   00000070   0x7978             LDRB     R0,[R7, #+5]
   \   00000072   0x79A1             LDRB     R1,[R4, #+6]
   \   00000074   0x1A40             SUBS     R0,R0,R1
   \   00000076   0x7BA1             LDRB     R1,[R4, #+14]
   \   00000078   0x4348             MULS     R0,R1,R0
   \   0000007A   0x21FF             MOVS     R1,#+255
   \   0000007C   0x.... 0x....      BL       __aeabi_idiv
   \   00000080   0x7238             STRB     R0,[R7, #+8]
   \   00000082   0x7A38             LDRB     R0,[R7, #+8]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD101             BNE      ??light_shadow_2
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x7238             STRB     R0,[R7, #+8]
    123              }
    124              // чужие пиксели не обрабатываем
    125              proc_pixel (pixel);   // теперь применяем цвета пикселей
   \                     ??light_shadow_2: (+1)
   \   0000008C   0x0038             MOVS     R0,R7
   \   0000008E   0x.... 0x....      BL       proc_pixel
   \   00000092   0x1C6D             ADDS     R5,R5,#+1
   \                     ??light_shadow_0: (+1)
   \   00000094   0x0028             MOVS     R0,R5
   \   00000096   0xB200             SXTH     R0,R0
   \   00000098   0x2832             CMP      R0,#+50
   \   0000009A   0xDA4E             BGE      ??light_shadow_7
   \   0000009C   0x0028             MOVS     R0,R5
   \   0000009E   0xB200             SXTH     R0,R0
   \   000000A0   0x2114             MOVS     R1,#+20
   \   000000A2   0x4341             MULS     R1,R0,R1
   \   000000A4   0x1877             ADDS     R7,R6,R1
   \   000000A6   0x200A             MOVS     R0,#+10
   \   000000A8   0x5E20             LDRSH    R0,[R4, R0]
   \   000000AA   0x8961             LDRH     R1,[R4, #+10]
   \   000000AC   0x8922             LDRH     R2,[R4, #+8]
   \   000000AE   0x1889             ADDS     R1,R1,R2
   \   000000B0   0x002A             MOVS     R2,R5
   \   000000B2   0xB212             SXTH     R2,R2
   \   000000B4   0xB200             SXTH     R0,R0
   \   000000B6   0x4282             CMP      R2,R0
   \   000000B8   0xDBAA             BLT      ??light_shadow_3
   \   000000BA   0x0028             MOVS     R0,R5
   \   000000BC   0xB200             SXTH     R0,R0
   \   000000BE   0xB209             SXTH     R1,R1
   \   000000C0   0x4288             CMP      R0,R1
   \   000000C2   0xDAA5             BGE      ??light_shadow_3
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x7278             STRB     R0,[R7, #+9]
   \   000000C8   0x60FC             STR      R4,[R7, #+12]
   \   000000CA   0x6820             LDR      R0,[R4, #+0]
   \   000000CC   0x8961             LDRH     R1,[R4, #+10]
   \   000000CE   0x1A69             SUBS     R1,R5,R1
   \   000000D0   0xB209             SXTH     R1,R1
   \   000000D2   0x2203             MOVS     R2,#+3
   \   000000D4   0x434A             MULS     R2,R1,R2
   \   000000D6   0x1880             ADDS     R0,R0,R2
   \   000000D8   0x7801             LDRB     R1,[R0, #+0]
   \   000000DA   0x7039             STRB     R1,[R7, #+0]
   \   000000DC   0x7841             LDRB     R1,[R0, #+1]
   \   000000DE   0x7079             STRB     R1,[R7, #+1]
   \   000000E0   0x7880             LDRB     R0,[R0, #+2]
   \   000000E2   0x70B8             STRB     R0,[R7, #+2]
   \   000000E4   0x7838             LDRB     R0,[R7, #+0]
   \   000000E6   0x78F9             LDRB     R1,[R7, #+3]
   \   000000E8   0x1A40             SUBS     R0,R0,R1
   \   000000EA   0x7B61             LDRB     R1,[R4, #+13]
   \   000000EC   0x4348             MULS     R0,R1,R0
   \   000000EE   0x21FF             MOVS     R1,#+255
   \   000000F0   0x.... 0x....      BL       __aeabi_idiv
   \   000000F4   0x71B8             STRB     R0,[R7, #+6]
   \   000000F6   0x79B8             LDRB     R0,[R7, #+6]
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD101             BNE      ??light_shadow_8
   \   000000FC   0x2001             MOVS     R0,#+1
   \   000000FE   0x71B8             STRB     R0,[R7, #+6]
   \                     ??light_shadow_8: (+1)
   \   00000100   0x7878             LDRB     R0,[R7, #+1]
   \   00000102   0x7939             LDRB     R1,[R7, #+4]
   \   00000104   0x1A40             SUBS     R0,R0,R1
   \   00000106   0x7B61             LDRB     R1,[R4, #+13]
   \   00000108   0x4348             MULS     R0,R1,R0
   \   0000010A   0x21FF             MOVS     R1,#+255
   \   0000010C   0x.... 0x....      BL       __aeabi_idiv
   \   00000110   0x71F8             STRB     R0,[R7, #+7]
   \   00000112   0x79F8             LDRB     R0,[R7, #+7]
   \   00000114   0x2800             CMP      R0,#+0
   \   00000116   0xD101             BNE      ??light_shadow_9
   \   00000118   0x2001             MOVS     R0,#+1
   \   0000011A   0x71F8             STRB     R0,[R7, #+7]
   \                     ??light_shadow_9: (+1)
   \   0000011C   0x78B8             LDRB     R0,[R7, #+2]
   \   0000011E   0x7979             LDRB     R1,[R7, #+5]
   \   00000120   0x1A40             SUBS     R0,R0,R1
   \   00000122   0x7B61             LDRB     R1,[R4, #+13]
   \   00000124   0x4348             MULS     R0,R1,R0
   \   00000126   0x21FF             MOVS     R1,#+255
   \   00000128   0x.... 0x....      BL       __aeabi_idiv
   \   0000012C   0x7238             STRB     R0,[R7, #+8]
   \   0000012E   0x7A38             LDRB     R0,[R7, #+8]
   \   00000130   0x2800             CMP      R0,#+0
   \   00000132   0xD1AB             BNE      ??light_shadow_2
   \   00000134   0x2001             MOVS     R0,#+1
   \   00000136   0x7238             STRB     R0,[R7, #+8]
   \   00000138   0xE7A8             B        ??light_shadow_2
    126            }
    127          }
   \                     ??light_shadow_7: (+1)
   \   0000013A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    128          
    129          /*******************************************************************************
    130          * обработка эффектов пикселя
    131          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    132          void proc_pixel (pixel_t *pixel)
    133          {
   \                     proc_pixel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    134            pixel_status stat = pixel->status;
   \   00000004   0x7A60             LDRB     R0,[R4, #+9]
    135            u32  step_t;
    136            u32  d_time;
    137            u8   delta;
    138            
    139            switch (stat)
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ      ??proc_pixel_0
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD046             BEQ      ??proc_pixel_1
   \   00000010   0xE091             B        ??proc_pixel_2
    140            {
    141            case P_STAT_ON: // пиксель активен - загорается
    142              if (timer_end (&pixel->color_timer, (u32)(pixel->light)->d_time))
   \                     ??proc_pixel_0: (+1)
   \   00000012   0x68E0             LDR      R0,[R4, #+12]
   \   00000014   0x7BC1             LDRB     R1,[R0, #+15]
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3010             ADDS     R0,R0,#+16
   \   0000001A   0x.... 0x....      BL       timer_end
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD03C             BEQ      ??proc_pixel_3
    143              {
    144                d_time = (u32)(pixel->light)->d_time;
   \   00000022   0x68E0             LDR      R0,[R4, #+12]
   \   00000024   0x7BC5             LDRB     R5,[R0, #+15]
    145                step_t = (system_time () - pixel->color_timer) / d_time;  // сколько шагов помещается за прошедшее время
   \   00000026   0x.... 0x....      BL       system_time
   \   0000002A   0x6921             LDR      R1,[R4, #+16]
   \   0000002C   0x1A40             SUBS     R0,R0,R1
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0x.... 0x....      BL       __aeabi_uidiv
   \   00000034   0x0005             MOVS     R5,R0
    146                timer_reset (&pixel->color_timer);
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x3010             ADDS     R0,R0,#+16
   \   0000003A   0x.... 0x....      BL       timer_reset
    147                
    148                delta = pixel->delta.r * step_t;  // умножаем шаги на дельту, чтобы получить смещение цвета
   \   0000003E   0x79A0             LDRB     R0,[R4, #+6]
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0x4348             MULS     R0,R1,R0
    149                if ((pixel->set.r - pixel->color.r) > delta)
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0xB2C9             UXTB     R1,R1
   \   00000048   0x7822             LDRB     R2,[R4, #+0]
   \   0000004A   0x78E3             LDRB     R3,[R4, #+3]
   \   0000004C   0x1AD2             SUBS     R2,R2,R3
   \   0000004E   0x4291             CMP      R1,R2
   \   00000050   0xDA03             BGE      ??proc_pixel_4
    150                {
    151                  pixel->color.r += delta;
   \   00000052   0x78E1             LDRB     R1,[R4, #+3]
   \   00000054   0x1808             ADDS     R0,R1,R0
   \   00000056   0x70E0             STRB     R0,[R4, #+3]
   \   00000058   0xE001             B        ??proc_pixel_5
    152                }
    153                else
    154                {
    155                  pixel->color.r = pixel->set.r;
   \                     ??proc_pixel_4: (+1)
   \   0000005A   0x7820             LDRB     R0,[R4, #+0]
   \   0000005C   0x70E0             STRB     R0,[R4, #+3]
    156                }
    157          
    158                delta = pixel->delta.g * step_t;
   \                     ??proc_pixel_5: (+1)
   \   0000005E   0x79E0             LDRB     R0,[R4, #+7]
   \   00000060   0x0029             MOVS     R1,R5
   \   00000062   0x4348             MULS     R0,R1,R0
    159                if ((pixel->set.g - pixel->color.g) > delta)
   \   00000064   0x0001             MOVS     R1,R0
   \   00000066   0xB2C9             UXTB     R1,R1
   \   00000068   0x7862             LDRB     R2,[R4, #+1]
   \   0000006A   0x7923             LDRB     R3,[R4, #+4]
   \   0000006C   0x1AD2             SUBS     R2,R2,R3
   \   0000006E   0x4291             CMP      R1,R2
   \   00000070   0xDA03             BGE      ??proc_pixel_6
    160                {
    161                  pixel->color.g += delta;
   \   00000072   0x7921             LDRB     R1,[R4, #+4]
   \   00000074   0x1808             ADDS     R0,R1,R0
   \   00000076   0x7120             STRB     R0,[R4, #+4]
   \   00000078   0xE001             B        ??proc_pixel_7
    162                }
    163                else
    164                {
    165                  pixel->color.g = pixel->set.g;
   \                     ??proc_pixel_6: (+1)
   \   0000007A   0x7860             LDRB     R0,[R4, #+1]
   \   0000007C   0x7120             STRB     R0,[R4, #+4]
    166                }
    167          
    168                delta = pixel->delta.b * step_t;
   \                     ??proc_pixel_7: (+1)
   \   0000007E   0x7A20             LDRB     R0,[R4, #+8]
   \   00000080   0x4368             MULS     R0,R5,R0
    169                if ((pixel->set.b - pixel->color.b) > delta)
   \   00000082   0x0001             MOVS     R1,R0
   \   00000084   0xB2C9             UXTB     R1,R1
   \   00000086   0x78A2             LDRB     R2,[R4, #+2]
   \   00000088   0x7963             LDRB     R3,[R4, #+5]
   \   0000008A   0x1AD2             SUBS     R2,R2,R3
   \   0000008C   0x4291             CMP      R1,R2
   \   0000008E   0xDA03             BGE      ??proc_pixel_8
    170                {
    171                  pixel->color.b += delta;
   \   00000090   0x7961             LDRB     R1,[R4, #+5]
   \   00000092   0x1808             ADDS     R0,R1,R0
   \   00000094   0x7160             STRB     R0,[R4, #+5]
   \   00000096   0xE001             B        ??proc_pixel_3
    172                }
    173                else
    174                {
    175                  pixel->color.b = pixel->set.b;
   \                     ??proc_pixel_8: (+1)
   \   00000098   0x78A0             LDRB     R0,[R4, #+2]
   \   0000009A   0x7160             STRB     R0,[R4, #+5]
    176                }
    177              }
    178              break;
   \                     ??proc_pixel_3: (+1)
   \   0000009C   0xE04B             B        ??proc_pixel_9
    179              
    180            case P_STAT_OFF:  // пиксель тухнет
    181              if (timer_end (&pixel->color_timer, (u32)(pixel->light)->d_time))
   \                     ??proc_pixel_1: (+1)
   \   0000009E   0x68E0             LDR      R0,[R4, #+12]
   \   000000A0   0x7BC1             LDRB     R1,[R0, #+15]
   \   000000A2   0x0020             MOVS     R0,R4
   \   000000A4   0x3010             ADDS     R0,R0,#+16
   \   000000A6   0x.... 0x....      BL       timer_end
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD042             BEQ      ??proc_pixel_10
    182              {
    183                d_time = (u32)(pixel->light)->d_time;
   \   000000AE   0x68E0             LDR      R0,[R4, #+12]
   \   000000B0   0x7BC5             LDRB     R5,[R0, #+15]
    184                step_t = (system_time () - pixel->color_timer) / d_time; // сколько шагов помещается за прошедшее время
   \   000000B2   0x.... 0x....      BL       system_time
   \   000000B6   0x6921             LDR      R1,[R4, #+16]
   \   000000B8   0x1A40             SUBS     R0,R0,R1
   \   000000BA   0x0029             MOVS     R1,R5
   \   000000BC   0x.... 0x....      BL       __aeabi_uidiv
   \   000000C0   0x0005             MOVS     R5,R0
    185                timer_reset (&pixel->color_timer);
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x3010             ADDS     R0,R0,#+16
   \   000000C6   0x.... 0x....      BL       timer_reset
    186                
    187                delta = pixel->delta.r * step_t;  // умножаем шаги на дельту, чтобы получить смещение цвета
   \   000000CA   0x79A0             LDRB     R0,[R4, #+6]
   \   000000CC   0x0029             MOVS     R1,R5
   \   000000CE   0x4348             MULS     R0,R1,R0
    188                if ((pixel->color.r - (pixel->light)->back.r) > delta)
   \   000000D0   0x0001             MOVS     R1,R0
   \   000000D2   0xB2C9             UXTB     R1,R1
   \   000000D4   0x78E2             LDRB     R2,[R4, #+3]
   \   000000D6   0x68E3             LDR      R3,[R4, #+12]
   \   000000D8   0x791B             LDRB     R3,[R3, #+4]
   \   000000DA   0x1AD2             SUBS     R2,R2,R3
   \   000000DC   0x4291             CMP      R1,R2
   \   000000DE   0xDA03             BGE      ??proc_pixel_11
    189                {
    190                  pixel->color.r -= delta;
   \   000000E0   0x78E1             LDRB     R1,[R4, #+3]
   \   000000E2   0x1A08             SUBS     R0,R1,R0
   \   000000E4   0x70E0             STRB     R0,[R4, #+3]
   \   000000E6   0xE002             B        ??proc_pixel_12
    191                }
    192                else
    193                {
    194                  pixel->color.r = (pixel->light)->back.r;  // останавливаемся на фоновом цвете
   \                     ??proc_pixel_11: (+1)
   \   000000E8   0x68E0             LDR      R0,[R4, #+12]
   \   000000EA   0x7900             LDRB     R0,[R0, #+4]
   \   000000EC   0x70E0             STRB     R0,[R4, #+3]
    195                }
    196          
    197                delta = pixel->delta.g * step_t;
   \                     ??proc_pixel_12: (+1)
   \   000000EE   0x79E0             LDRB     R0,[R4, #+7]
   \   000000F0   0x0029             MOVS     R1,R5
   \   000000F2   0x4348             MULS     R0,R1,R0
    198                if ((pixel->color.g - (pixel->light)->back.g) > delta)
   \   000000F4   0x0001             MOVS     R1,R0
   \   000000F6   0xB2C9             UXTB     R1,R1
   \   000000F8   0x7922             LDRB     R2,[R4, #+4]
   \   000000FA   0x68E3             LDR      R3,[R4, #+12]
   \   000000FC   0x795B             LDRB     R3,[R3, #+5]
   \   000000FE   0x1AD2             SUBS     R2,R2,R3
   \   00000100   0x4291             CMP      R1,R2
   \   00000102   0xDA03             BGE      ??proc_pixel_13
    199                {
    200                  pixel->color.g -= delta;
   \   00000104   0x7921             LDRB     R1,[R4, #+4]
   \   00000106   0x1A08             SUBS     R0,R1,R0
   \   00000108   0x7120             STRB     R0,[R4, #+4]
   \   0000010A   0xE002             B        ??proc_pixel_14
    201                }
    202                else
    203                {
    204                  pixel->color.g = (pixel->light)->back.g;
   \                     ??proc_pixel_13: (+1)
   \   0000010C   0x68E0             LDR      R0,[R4, #+12]
   \   0000010E   0x7940             LDRB     R0,[R0, #+5]
   \   00000110   0x7120             STRB     R0,[R4, #+4]
    205                }
    206          
    207                delta = pixel->delta.b * step_t;
   \                     ??proc_pixel_14: (+1)
   \   00000112   0x7A20             LDRB     R0,[R4, #+8]
   \   00000114   0x4368             MULS     R0,R5,R0
    208                if ((pixel->color.b - (pixel->light)->back.b) > delta)
   \   00000116   0x0001             MOVS     R1,R0
   \   00000118   0xB2C9             UXTB     R1,R1
   \   0000011A   0x7962             LDRB     R2,[R4, #+5]
   \   0000011C   0x68E3             LDR      R3,[R4, #+12]
   \   0000011E   0x799B             LDRB     R3,[R3, #+6]
   \   00000120   0x1AD2             SUBS     R2,R2,R3
   \   00000122   0x4291             CMP      R1,R2
   \   00000124   0xDA03             BGE      ??proc_pixel_15
    209                {
    210                  pixel->color.b -= delta;
   \   00000126   0x7961             LDRB     R1,[R4, #+5]
   \   00000128   0x1A08             SUBS     R0,R1,R0
   \   0000012A   0x7160             STRB     R0,[R4, #+5]
   \   0000012C   0xE002             B        ??proc_pixel_10
    211                }
    212                else
    213                {
    214                  pixel->color.b = (pixel->light)->back.b;
   \                     ??proc_pixel_15: (+1)
   \   0000012E   0x68E0             LDR      R0,[R4, #+12]
   \   00000130   0x7980             LDRB     R0,[R0, #+6]
   \   00000132   0x7160             STRB     R0,[R4, #+5]
    215                }
    216              }
    217              break;
   \                     ??proc_pixel_10: (+1)
   \   00000134   0xE7FF             B        ??proc_pixel_9
    218              
    219              default:
    220              break;
    221            }
    222          }
   \                     ??proc_pixel_2: (+1)
   \                     ??proc_pixel_9: (+1)
   \   00000136   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    223          
    224          
    225          /*******************************************************************************
    226          * движение светлячка
    227          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    228          void light_moving (light_t *light)
    229          {
   \                     light_moving: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    230            if (light->step_time) // двигаемся, если указано время на шаг
   \   00000004   0x8A20             LDRH     R0,[R4, #+16]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD014             BEQ      ??light_moving_0
    231            {
    232              if (timer_end (&light->mov_timer, light->step_time))
   \   0000000A   0x8A21             LDRH     R1,[R4, #+16]
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x3014             ADDS     R0,R0,#+20
   \   00000010   0x.... 0x....      BL       timer_end
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD00D             BEQ      ??light_moving_0
    233              {
    234                timer_reset (&light->mov_timer);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x3014             ADDS     R0,R0,#+20
   \   0000001C   0x.... 0x....      BL       timer_reset
    235                if (light->direction == MOV_UP)
   \   00000020   0x7B20             LDRB     R0,[R4, #+12]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD103             BNE      ??light_moving_1
    236                {
    237                  light->position++;  // шаг вверх
   \   00000026   0x8960             LDRH     R0,[R4, #+10]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x8160             STRH     R0,[R4, #+10]
   \   0000002C   0xE002             B        ??light_moving_0
    238                }
    239                else
    240                {
    241                  light->position--;  // шаг вниз
   \                     ??light_moving_1: (+1)
   \   0000002E   0x8960             LDRH     R0,[R4, #+10]
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0x8160             STRH     R0,[R4, #+10]
    242                }
    243              }
    244            }
    245          }
   \                     ??light_moving_0: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    246          
    247          /*******************************************************************************
    248          * обнуление всех слоёв
    249          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    250          void init_layers (void)
    251          {
   \                     init_layers: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    252            for (u8 n = 0; n < NUM_LAYERS; n++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE009             B        ??init_layers_0
    253            {
    254              pixel_init (layer[n]);
   \                     ??init_layers_1: (+1)
   \   00000006   0x....             LDR      R0,??DataTable2
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0xB2C9             UXTB     R1,R1
   \   0000000C   0x22FA             MOVS     R2,#+250
   \   0000000E   0x0092             LSLS     R2,R2,#+2        ;; #+1000
   \   00000010   0x4351             MULS     R1,R2,R1
   \   00000012   0x1840             ADDS     R0,R0,R1
   \   00000014   0x.... 0x....      BL       pixel_init
    255            }
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??init_layers_0: (+1)
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xDBF1             BLT      ??init_layers_1
    256          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    257          
    258          /*******************************************************************************
    259          * обнуление слоя
    260          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    261          void pixel_init (pixel_t *layer)
    262          {
   \                     pixel_init: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    263            const pixel_t zero_pixel = 
    264            {
    265              BLACK,
    266              BLACK,
    267              BLACK,
    268              P_STAT_EMPTY,
    269              0,
    270              0
    271            };
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x....             LDR      R1,??DataTable5
   \   0000000A   0x2214             MOVS     R2,#+20
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    272            
    273            for (s32 i = 0; i < LED_COUNT; i++)
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0xE009             B        ??pixel_init_0
    274            {
    275              memcpy (layer, &zero_pixel, sizeof (zero_pixel));
   \                     ??pixel_init_1: (+1)
   \   00000014   0x2214             MOVS     R2,#+20
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy
    276              // layer->set.r = 0;
    277              // layer->set.g = 0;
    278              // layer->set.b = 0;
    279              // layer->color.r = 0;
    280              // layer->color.g = 0;
    281              // layer->color.b = 0;
    282              // layer->delta.r = 0;
    283              // layer->delta.g = 0;
    284              // layer->delta.b = 0;
    285              // layer->status = P_STAT_EMPTY;
    286              // layer->light = 0;
    287              layer->color_timer = system_time ();
   \   0000001E   0x.... 0x....      BL       system_time
   \   00000022   0x6120             STR      R0,[R4, #+16]
    288              layer++;
   \   00000024   0x3414             ADDS     R4,R4,#+20
    289            }
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??pixel_init_0: (+1)
   \   00000028   0x2D32             CMP      R5,#+50
   \   0000002A   0xDBF3             BLT      ??pixel_init_1
    290          }
   \   0000002C   0xB005             ADD      SP,SP,#+20
   \   0000002E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \   0000000C   0x00000000         DC32 0H, 0
   \              0x00000000   
    291          
    292          /*******************************************************************************
    293          * бегущий туда - сюда огонёк
    294          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    295          void effect1 (void)
    296          {
   \                     effect1: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    297            const static color_t  p_RED[1]    = {RED};  //, CIAN, GREEN, YELLOW, ORANGE, RED}; // в светлячке 3 пикселя
    298            const static color_t  p_GREEN[1]  = {GREEN};
    299            const static color_t  p_ORANGE[1] = {ORANGE};
    300            const static color_t  p_BLUE[1]   = {BLUE};
    301            const static color_t  p_ROSE[1]   = {ROSE};
    302            const static color_t  p_CIAN[1]   = {CIAN};
    303            const static color_t  p_YELLOW[1] = {YELLOW};  //, RED, CIAN};  //, GREEN, YELLOW, ORANGE, RED}; // в светлячке 3 пикселя
    304            const static color_t  p_OCEAN[1]  = {OCEAN};
    305            static light_t 	l_1 = 
    306            {
    307              (color_t *)p_RED,      // указатель на паттерн цветов
    308              DARK_RED,   // фоновый цвет
    309              1,          // размер в пикселях
    310              0,          // позиция
    311              MOV_UP,     // направление движения
    312              40,         // часть включения (на шаг)
    313              10,         // часть выключения (на шаг)
    314              20,         // шаг вкл/выкл (мс)
    315              300,        // скорость движения (мс на сдвиг)
    316              0           // таймер движения
    317            };
    318            static light_t 	l_2 = 
    319            {
    320             (color_t *) p_GREEN,    // указатель на паттерн цветов
    321              DARK_GREEN, // фоновый цвет
    322              1,          // размер в пикселях
    323              -6,         // позиция
    324              MOV_UP,     // направление движения
    325              40,         // часть включения (на шаг)
    326              10,         // часть выключения (на шаг)
    327              20,         // шаг вкл/выкл (мс)
    328              300,        // скорость движения (мс на сдвиг)
    329              0           // таймер движения
    330            };
    331            static light_t 	l_3 = 
    332            {
    333              (color_t *)p_ORANGE,   // указатель на паттерн цветов
    334              DARK_ORANGE, // фоновый цвет
    335              1,          // размер в пикселях
    336              -12,        // позиция
    337              MOV_UP,     // направление движения
    338              40,         // часть включения (на шаг)
    339              10,         // часть выключения (на шаг)
    340              20,         // шаг вкл/выкл (мс)
    341              300,        // скорость движения (мс на сдвиг)
    342              0           // таймер движения
    343            };
    344            static light_t 	l_4 = 
    345            {
    346              (color_t *)p_BLUE,     // указатель на паттерн цветов
    347              DARK_BLUE,  // 
    348              1,          // размер в пикселях
    349              -18,         // позиция
    350              MOV_UP,     // направление движения
    351              40,         // часть включения (на шаг)
    352              10,         // часть выключения (на шаг)
    353              20,         // шаг вкл/выкл (мс)
    354              300,        // скорость движения (мс на сдвиг)
    355              0           // таймер движения
    356            };
    357            static light_t 	l_5 = 
    358            {
    359              (color_t *)p_ROSE,     // указатель на паттерн цветов
    360              DARK_ROSE,  //
    361              1,          // размер в пикселях
    362              -26,         // позиция
    363              MOV_UP,     // направление движения
    364              40,         // часть включения (на шаг)
    365              10,         // часть выключения (на шаг)
    366              20,         // шаг вкл/выкл (мс)
    367              300,        // скорость движения (мс на сдвиг)
    368              0           // таймер движения
    369            };
    370            static light_t 	l_6 = 
    371            {
    372              (color_t *)p_CIAN,     // указатель на паттерн цветов
    373              DARK_CIAN,  //
    374              1,          // размер в пикселях
    375              -32,         // позиция
    376              MOV_UP,     // направление движения
    377              40,         // часть включения (на шаг)
    378              10,         // часть выключения (на шаг)
    379              20,         // шаг вкл/выкл (мс)
    380              300,        // скорость движения (мс на сдвиг)
    381              0           // таймер движения
    382            };
    383            static light_t 	l_7 = 
    384            {
    385              (color_t *)p_YELLOW,   // указатель на паттерн цветов
    386              DARK_YELLOW,  //
    387              1,          // размер в пикселях
    388              -38,         // позиция
    389              MOV_UP,     // направление движения
    390              40,         // часть включения (на шаг)
    391              10,         // часть выключения (на шаг)
    392              20,         // шаг вкл/выкл (мс)
    393              300,        // скорость движения (мс на сдвиг)
    394              0           // таймер движения
    395            };
    396            static light_t 	l_8 = 
    397            {
    398              (color_t *)p_OCEAN,    // указатель на паттерн цветов
    399              DARK_OCEAN, //
    400              1,          // размер в пикселях
    401              -44,         // позиция
    402              MOV_UP,     // направление движения
    403              40,         // часть включения (на шаг)
    404              10,         // часть выключения (на шаг)
    405              20,         // шаг вкл/выкл (мс)
    406              300,        // скорость движения (мс на сдвиг)
    407              0           // таймер движения
    408            };
    409          
    410            static eff_struct light1 = {EFF_INIT, &l_1, layer[0]};
    411            static eff_struct light2 = {EFF_INIT, &l_2, layer[0]};
    412            static eff_struct light3 = {EFF_INIT, &l_3, layer[0]};
    413            static eff_struct light4 = {EFF_INIT, &l_4, layer[0]};
    414            static eff_struct light5 = {EFF_INIT, &l_5, layer[0]};
    415            static eff_struct light6 = {EFF_INIT, &l_6, layer[0]};
    416            static eff_struct light7 = {EFF_INIT, &l_7, layer[0]};
    417            static eff_struct light8 = {EFF_INIT, &l_8, layer[0]};
    418          
    419          // сам эффект  
    420            light_eff_up (&light1); // бежать вверх
   \   00000002   0x....             LDR      R0,??DataTable5_1
   \   00000004   0x.... 0x....      BL       light_eff_up
    421            light_eff_up (&light2);
   \   00000008   0x....             LDR      R0,??DataTable5_2
   \   0000000A   0x.... 0x....      BL       light_eff_up
    422            light_eff_up (&light3);
   \   0000000E   0x....             LDR      R0,??DataTable5_3
   \   00000010   0x.... 0x....      BL       light_eff_up
    423            light_eff_up (&light4);
   \   00000014   0x....             LDR      R0,??DataTable5_4
   \   00000016   0x.... 0x....      BL       light_eff_up
    424            light_eff_up (&light5);
   \   0000001A   0x....             LDR      R0,??DataTable5_5
   \   0000001C   0x.... 0x....      BL       light_eff_up
    425            light_eff_up (&light6);
   \   00000020   0x....             LDR      R0,??DataTable5_6
   \   00000022   0x.... 0x....      BL       light_eff_up
    426            light_eff_up (&light7);
   \   00000026   0x....             LDR      R0,??DataTable5_7
   \   00000028   0x.... 0x....      BL       light_eff_up
    427            light_eff_up (&light8);
   \   0000002C   0x....             LDR      R0,??DataTable5_8
   \   0000002E   0x.... 0x....      BL       light_eff_up
    428            
    429            //light_shadow (layer[0], &l_1);
    430              
    431          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .rodata, align 4
   \                     `effect1::p_RED`:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `effect1::p_GREEN`:
   \   00000000   0x00 0xFF          DC8 0, 255, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `effect1::p_ORANGE`:
   \   00000000   0xFF 0x20          DC8 255, 32, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `effect1::p_BLUE`:
   \   00000000   0x00 0x00          DC8 0, 0, 255, 0
   \              0xFF 0x00    

   \                                 In section .rodata, align 4
   \                     `effect1::p_ROSE`:
   \   00000000   0xFF 0x40          DC8 255, 64, 64, 0
   \              0x40 0x00    

   \                                 In section .rodata, align 4
   \                     `effect1::p_CIAN`:
   \   00000000   0x00 0xFF          DC8 0, 255, 255, 0
   \              0xFF 0x00    

   \                                 In section .rodata, align 4
   \                     `effect1::p_YELLOW`:
   \   00000000   0xFF 0x50          DC8 255, 80, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `effect1::p_OCEAN`:
   \   00000000   0x00 0x40          DC8 0, 64, 255, 0
   \              0xFF 0x00    

   \                                 In section .data, align 4
   \                     `effect1::l_1`:
   \   00000000   0x........         DC32 `effect1::p_RED`
   \   00000004   0x20 0x00          DC8 32, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x0001 0x0000      DC16 1, 0
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::l_2`:
   \   00000000   0x........         DC32 `effect1::p_GREEN`
   \   00000004   0x00 0x20          DC8 0, 32, 0, 0
   \              0x00 0x00    
   \   00000008   0x0001 0xFFFA      DC16 1, -6
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::l_3`:
   \   00000000   0x........         DC32 `effect1::p_ORANGE`
   \   00000004   0x20 0x08          DC8 32, 8, 0, 0
   \              0x00 0x00    
   \   00000008   0x0001 0xFFF4      DC16 1, -12
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::l_4`:
   \   00000000   0x........         DC32 `effect1::p_BLUE`
   \   00000004   0x00 0x00          DC8 0, 0, 32, 0
   \              0x20 0x00    
   \   00000008   0x0001 0xFFEE      DC16 1, -18
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::l_5`:
   \   00000000   0x........         DC32 `effect1::p_ROSE`
   \   00000004   0x20 0x08          DC8 32, 8, 8, 0
   \              0x08 0x00    
   \   00000008   0x0001 0xFFE6      DC16 1, -26
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::l_6`:
   \   00000000   0x........         DC32 `effect1::p_CIAN`
   \   00000004   0x00 0x20          DC8 0, 32, 32, 0
   \              0x20 0x00    
   \   00000008   0x0001 0xFFE0      DC16 1, -32
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::l_7`:
   \   00000000   0x........         DC32 `effect1::p_YELLOW`
   \   00000004   0x20 0x14          DC8 32, 20, 0, 0
   \              0x00 0x00    
   \   00000008   0x0001 0xFFDA      DC16 1, -38
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::l_8`:
   \   00000000   0x........         DC32 `effect1::p_OCEAN`
   \   00000004   0x00 0x08          DC8 0, 8, 32, 0
   \              0x20 0x00    
   \   00000008   0x0001 0xFFD4      DC16 1, -44
   \   0000000C   0x00 0x28          DC8 0, 40, 10, 20
   \              0x0A 0x14    
   \   00000010   0x012C             DC16 300
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect1::light1`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_1`, layer
   \              0x........   

   \                                 In section .data, align 4
   \                     `effect1::light2`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_2`, layer
   \              0x........   

   \                                 In section .data, align 4
   \                     `effect1::light3`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_3`, layer
   \              0x........   

   \                                 In section .data, align 4
   \                     `effect1::light4`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_4`, layer
   \              0x........   

   \                                 In section .data, align 4
   \                     `effect1::light5`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_5`, layer
   \              0x........   

   \                                 In section .data, align 4
   \                     `effect1::light6`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_6`, layer
   \              0x........   

   \                                 In section .data, align 4
   \                     `effect1::light7`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_7`, layer
   \              0x........   

   \                                 In section .data, align 4
   \                     `effect1::light8`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `effect1::l_8`, layer
   \              0x........   
    432          
    433          
    434          /*******************************************************************************
    435          * огонёк бежит туда-сюда
    436          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    437          void light_eff_reverse (eff_struct *eff)
    438          {
   \                     light_eff_reverse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    439            switch (eff->status)
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD003             BEQ      ??light_eff_reverse_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD018             BEQ      ??light_eff_reverse_1
   \   0000000E   0xD307             BCC      ??light_eff_reverse_2
   \   00000010   0xE021             B        ??light_eff_reverse_3
    440            {
    441            case EFF_INIT:
    442              //pixel_init (light->layer);
    443              eff->status = EFF_UP;
   \                     ??light_eff_reverse_0: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x7020             STRB     R0,[R4, #+0]
    444              timer_reset (&(eff->light)->mov_timer);
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x3014             ADDS     R0,R0,#+20
   \   0000001A   0x.... 0x....      BL       timer_reset
    445             // (eff->light)->mov_timer = system_time ();
    446              break;
   \   0000001E   0xE01F             B        ??light_eff_reverse_4
    447              
    448            case EFF_UP:
    449              if ((eff->light)->position >= (LED_COUNT - (eff->light)->size))
   \                     ??light_eff_reverse_2: (+1)
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x210A             MOVS     R1,#+10
   \   00000024   0x5E40             LDRSH    R0,[R0, R1]
   \   00000026   0x2132             MOVS     R1,#+50
   \   00000028   0x6862             LDR      R2,[R4, #+4]
   \   0000002A   0x2308             MOVS     R3,#+8
   \   0000002C   0x5ED2             LDRSH    R2,[R2, R3]
   \   0000002E   0x1A89             SUBS     R1,R1,R2
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xDB04             BLT      ??light_eff_reverse_5
    450              {
    451                (eff->light)->direction = MOV_DOWN;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x6861             LDR      R1,[R4, #+4]
   \   00000038   0x7308             STRB     R0,[R1, #+12]
    452                eff->status = EFF_DOWN;
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
    453              }
    454              break;
   \                     ??light_eff_reverse_5: (+1)
   \   0000003E   0xE00F             B        ??light_eff_reverse_4
    455              
    456            case EFF_DOWN:
    457              if ((eff->light)->position < 0)
   \                     ??light_eff_reverse_1: (+1)
   \   00000040   0x6860             LDR      R0,[R4, #+4]
   \   00000042   0x210A             MOVS     R1,#+10
   \   00000044   0x5E40             LDRSH    R0,[R0, R1]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD504             BPL      ??light_eff_reverse_6
    458              {
    459                (eff->light)->direction = MOV_UP;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6861             LDR      R1,[R4, #+4]
   \   0000004E   0x7308             STRB     R0,[R1, #+12]
    460                eff->status = EFF_UP;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x7020             STRB     R0,[R4, #+0]
    461              }
    462              break;
   \                     ??light_eff_reverse_6: (+1)
   \   00000054   0xE004             B        ??light_eff_reverse_4
    463              
    464            default:
    465              pixel_init (eff->layer);
   \                     ??light_eff_reverse_3: (+1)
   \   00000056   0x68A0             LDR      R0,[R4, #+8]
   \   00000058   0x.... 0x....      BL       pixel_init
    466              eff->status = EFF_UP;  
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x7020             STRB     R0,[R4, #+0]
    467              break;
    468            }
    469            light_moving (eff->light);
   \                     ??light_eff_reverse_4: (+1)
   \   00000060   0x6860             LDR      R0,[R4, #+4]
   \   00000062   0x.... 0x....      BL       light_moving
    470            light_shadow (eff->layer, eff->light);
   \   00000066   0x6861             LDR      R1,[R4, #+4]
   \   00000068   0x68A0             LDR      R0,[R4, #+8]
   \   0000006A   0x.... 0x....      BL       light_shadow
    471          }
   \   0000006E   0xBD10             POP      {R4,PC}          ;; return
    472          
    473          /*******************************************************************************
    474          * огонёк бежит снизу вверх
    475          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    476          void light_eff_up (eff_struct *eff)
    477          {
   \                     light_eff_up: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    478            switch (eff->status)
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD003             BEQ      ??light_eff_up_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD014             BEQ      ??light_eff_up_1
   \   0000000E   0xD307             BCC      ??light_eff_up_2
   \   00000010   0xE013             B        ??light_eff_up_3
    479            {
    480            case EFF_INIT:
    481              eff->status = EFF_UP;
   \                     ??light_eff_up_0: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x7020             STRB     R0,[R4, #+0]
    482              timer_reset (&(eff->light)->mov_timer);
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x3014             ADDS     R0,R0,#+20
   \   0000001A   0x.... 0x....      BL       timer_reset
    483              break;
   \   0000001E   0xE011             B        ??light_eff_up_4
    484              
    485            case EFF_UP:
    486              if ((eff->light)->position >= LED_COUNT)
   \                     ??light_eff_up_2: (+1)
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x210A             MOVS     R1,#+10
   \   00000024   0x5E40             LDRSH    R0,[R0, R1]
   \   00000026   0x2832             CMP      R0,#+50
   \   00000028   0xDB05             BLT      ??light_eff_up_5
    487              {
    488                (eff->light)->position = -((eff->light)->size);
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x2108             MOVS     R1,#+8
   \   0000002E   0x5E40             LDRSH    R0,[R0, R1]
   \   00000030   0x4241             RSBS     R1,R0,#+0
   \   00000032   0x6860             LDR      R0,[R4, #+4]
   \   00000034   0x8141             STRH     R1,[R0, #+10]
    489              }
    490              break;
   \                     ??light_eff_up_5: (+1)
   \   00000036   0xE005             B        ??light_eff_up_4
    491              
    492            case EFF_DOWN:
    493              break;
   \                     ??light_eff_up_1: (+1)
   \   00000038   0xE004             B        ??light_eff_up_4
    494              
    495            default:
    496              pixel_init (eff->layer);
   \                     ??light_eff_up_3: (+1)
   \   0000003A   0x68A0             LDR      R0,[R4, #+8]
   \   0000003C   0x.... 0x....      BL       pixel_init
    497              eff->status = EFF_UP;  
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x7020             STRB     R0,[R4, #+0]
    498              break;
    499            }
    500            light_moving (eff->light);
   \                     ??light_eff_up_4: (+1)
   \   00000044   0x6860             LDR      R0,[R4, #+4]
   \   00000046   0x.... 0x....      BL       light_moving
    501            light_shadow (eff->layer, eff->light);
   \   0000004A   0x6861             LDR      R1,[R4, #+4]
   \   0000004C   0x68A0             LDR      R0,[R4, #+8]
   \   0000004E   0x.... 0x....      BL       light_shadow
    502          }
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
    503          
    504          
    505          /*******************************************************************************
    506          * огоньки разного цвета бегут по одному
    507          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    508          void effect2 (void)
    509          {
   \                     effect2: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    510            const static color_t  patterns[8] = {RED, GREEN, ORANGE, BLUE, ROSE, CIAN, YELLOW, VIOLET};
    511            const static color_t  backs[8]    = {DARK_RED, DARK_GREEN, DARK_ORANGE, DARK_BLUE, DARK_ROSE, DARK_CIAN, DARK_YELLOW, DARK_VIOLET};
    512            static color_t  ch_patt[2] = {RED, WHITE};
    513            static light_t 	l_21 = 
    514            {
    515              ch_patt,   // указатель на паттерн цветов
    516              DARK_RED,   // фоновый цвет
    517              2,          // размер в пикселях
    518              0,          // позиция
    519              MOV_UP,     // направление движения
    520              255,         // часть включения (на шаг)
    521              5,         // часть выключения (на шаг)
    522              20,         // шаг вкл/выкл (мс)
    523              80,        // скорость движения (мс на сдвиг)
    524              0           // таймер движения
    525            };
    526            static light_t 	l_22 = 
    527            {
    528              ch_patt,   // указатель на паттерн цветов
    529              DARK_RED,   // фоновый цвет
    530              2,          // размер в пикселях
    531              0,          // позиция
    532              MOV_UP,     // направление движения
    533              255,         // часть включения (на шаг)
    534              3,         // часть выключения (на шаг)
    535              20,         // шаг вкл/выкл (мс)
    536              40,        // скорость движения (мс на сдвиг)
    537              0           // таймер движения
    538            };
    539           
    540            static eff_stat  status2;
    541            static light_t  *p_light = &l_21;
    542            static u8 count_color = 0;
    543          
    544            switch (status2)
   \   00000002   0x....             LDR      R0,??DataTable5_9
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD002             BEQ      ??effect2_0
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD009             BEQ      ??effect2_1
   \   0000000E   0xE047             B        ??effect2_2
    545            {
    546            case EFF_INIT:
    547              status2 = EFF_UP;
   \                     ??effect2_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x....             LDR      R1,??DataTable5_9
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    548              timer_reset (&p_light->mov_timer);
   \   00000016   0x....             LDR      R0,??DataTable5_10
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x3014             ADDS     R0,R0,#+20
   \   0000001C   0x.... 0x....      BL       timer_reset
    549              break;
   \   00000020   0xE044             B        ??effect2_3
    550              
    551            case EFF_UP:
    552              if (p_light->position >= LED_COUNT)
   \                     ??effect2_1: (+1)
   \   00000022   0x....             LDR      R0,??DataTable5_10
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x210A             MOVS     R1,#+10
   \   00000028   0x5E40             LDRSH    R0,[R0, R1]
   \   0000002A   0x2832             CMP      R0,#+50
   \   0000002C   0xDB37             BLT      ??effect2_4
    553              {
    554                p_light->position = 1 - p_light->size;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x....             LDR      R1,??DataTable5_10
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x8909             LDRH     R1,[R1, #+8]
   \   00000036   0x1A40             SUBS     R0,R0,R1
   \   00000038   0x....             LDR      R1,??DataTable5_10
   \   0000003A   0x6809             LDR      R1,[R1, #+0]
   \   0000003C   0x8148             STRH     R0,[R1, #+10]
    555                count_color++;
   \   0000003E   0x....             LDR      R0,??DataTable5_11
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR      R1,??DataTable5_11
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    556                if (count_color > 7) count_color = 0;
   \   00000048   0x....             LDR      R0,??DataTable5_11
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x2808             CMP      R0,#+8
   \   0000004E   0xDB02             BLT      ??effect2_5
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR      R1,??DataTable5_11
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    557                if ((count_color %2) == 1)
   \                     ??effect2_5: (+1)
   \   00000056   0x....             LDR      R0,??DataTable5_11
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x2102             MOVS     R1,#+2
   \   0000005C   0x.... 0x....      BL       __aeabi_idivmod
   \   00000060   0x2901             CMP      R1,#+1
   \   00000062   0xD103             BNE      ??effect2_6
    558                {
    559                  p_light = &l_22;
   \   00000064   0x....             LDR      R0,??DataTable5_12
   \   00000066   0x....             LDR      R1,??DataTable5_10
   \   00000068   0x6008             STR      R0,[R1, #+0]
   \   0000006A   0xE002             B        ??effect2_7
    560                }
    561                else
    562                {
    563                  p_light = &l_21;
   \                     ??effect2_6: (+1)
   \   0000006C   0x....             LDR      R0,??DataTable5_13
   \   0000006E   0x....             LDR      R1,??DataTable5_10
   \   00000070   0x6008             STR      R0,[R1, #+0]
    564                }
    565                ch_patt[0] = patterns[count_color];
   \                     ??effect2_7: (+1)
   \   00000072   0x....             LDR      R0,??DataTable5_14
   \   00000074   0x....             LDR      R1,??DataTable5_15
   \   00000076   0x....             LDR      R2,??DataTable5_11
   \   00000078   0x7812             LDRB     R2,[R2, #+0]
   \   0000007A   0x2303             MOVS     R3,#+3
   \   0000007C   0x435A             MULS     R2,R3,R2
   \   0000007E   0x1889             ADDS     R1,R1,R2
   \   00000080   0x2203             MOVS     R2,#+3
   \   00000082   0x.... 0x....      BL       __aeabi_memcpy
    566                p_light->back = backs[count_color];
   \   00000086   0x....             LDR      R0,??DataTable5_10
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x1D00             ADDS     R0,R0,#+4
   \   0000008C   0x....             LDR      R1,??DataTable5_16
   \   0000008E   0x....             LDR      R2,??DataTable5_11
   \   00000090   0x7812             LDRB     R2,[R2, #+0]
   \   00000092   0x2303             MOVS     R3,#+3
   \   00000094   0x435A             MULS     R2,R3,R2
   \   00000096   0x1889             ADDS     R1,R1,R2
   \   00000098   0x2203             MOVS     R2,#+3
   \   0000009A   0x.... 0x....      BL       __aeabi_memcpy
    567              }
    568              break;
   \                     ??effect2_4: (+1)
   \   0000009E   0xE005             B        ??effect2_3
    569              
    570            default:
    571              pixel_init (layer[0]);
   \                     ??effect2_2: (+1)
   \   000000A0   0x....             LDR      R0,??DataTable5_17
   \   000000A2   0x.... 0x....      BL       pixel_init
    572              status2 = EFF_UP;  
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x....             LDR      R1,??DataTable5_9
   \   000000AA   0x7008             STRB     R0,[R1, #+0]
    573              break;
    574            }
    575            
    576            light_moving (p_light);
   \                     ??effect2_3: (+1)
   \   000000AC   0x....             LDR      R0,??DataTable5_10
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x.... 0x....      BL       light_moving
    577            light_shadow (layer[0], p_light);
   \   000000B4   0x....             LDR      R0,??DataTable5_10
   \   000000B6   0x6801             LDR      R1,[R0, #+0]
   \   000000B8   0x....             LDR      R0,??DataTable5_17
   \   000000BA   0x.... 0x....      BL       light_shadow
    578            
    579          }
   \   000000BE   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .rodata, align 4
   \                     `effect2::patterns`:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0, 255, 0, 255, 32, 0, 0, 0, 255, 255, 64, 64, 0, 255
   \              0x00 0x00    
   \              0xFF 0x00    
   \              0xFF 0x20    
   \              0x00 0x00    
   \              0x00 0xFF    
   \              0xFF 0x40    
   \              0x40 0x00    
   \              0xFF         
   \   00000011   0xFF 0xFF          DC8 255, 255, 80, 0, 255, 0, 255
   \              0x50 0x00    
   \              0xFF 0x00    
   \              0xFF         

   \                                 In section .rodata, align 4
   \                     `effect2::backs`:
   \   00000000   0x20 0x00          DC8 32, 0, 0, 0, 32, 0, 32, 8, 0, 0, 0, 32, 32, 8, 8, 0, 32, 32, 32, 20
   \              0x00 0x00    
   \              0x20 0x00    
   \              0x20 0x08    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x20 0x08    
   \              0x08 0x00    
   \              0x20 0x20    
   \              0x20 0x14    
   \   00000014   0x00 0x20          DC8 0, 32, 0, 32
   \              0x00 0x20    

   \                                 In section .data, align 4
   \                     `effect2::ch_patt`:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 255, 255, 255, 0, 0
   \              0x00 0xFF    
   \              0xFF 0xFF    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     `effect2::l_21`:
   \   00000000   0x........         DC32 `effect2::ch_patt`
   \   00000004   0x20 0x00          DC8 32, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x0002 0x0000      DC16 2, 0
   \   0000000C   0x00 0xFF          DC8 0, 255, 5, 20
   \              0x05 0x14    
   \   00000010   0x0050             DC16 80
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .data, align 4
   \                     `effect2::l_22`:
   \   00000000   0x........         DC32 `effect2::ch_patt`
   \   00000004   0x20 0x00          DC8 32, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x0002 0x0000      DC16 2, 0
   \   0000000C   0x00 0xFF          DC8 0, 255, 3, 20
   \              0x03 0x14    
   \   00000010   0x0028             DC16 40
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x00000000         DC32 0

   \                                 In section .bss, align 1
   \                     `effect2::status2`:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     `effect2::p_light`:
   \   00000000   0x........         DC32 `effect2::l_21`

   \                                 In section .bss, align 1
   \                     `effect2::count_color`:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     system_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     layer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     g

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x00000962         DC32     0x962

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     `effect1::light1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     `effect1::light2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     `effect1::light3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     `effect1::light4`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     `effect1::light5`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     `effect1::light6`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `effect1::light7`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     `effect1::light8`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     `effect2::status2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     `effect2::p_light`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     `effect2::count_color`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     `effect2::l_22`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     `effect2::l_21`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     `effect2::ch_patt`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     `effect2::patterns`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     `effect2::backs`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     layer

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   effect1
         8   -> light_eff_up
       8   effect2
         8   -> __aeabi_memcpy
         8   -> light_moving
         8   -> light_shadow
         8   -> pixel_init
         8   -> timer_reset
         8 __aeabi_idivmod
       8   effects_proc
         8   -> effect2
         8   -> get_message
         8   -> sum_layers
       4   get_message
       8   init_layers
         8   -> pixel_init
       8   light_eff_reverse
         8   -> light_moving
         8   -> light_shadow
         8   -> pixel_init
         8   -> timer_reset
       8   light_eff_up
         8   -> light_moving
         8   -> light_shadow
         8   -> pixel_init
         8   -> timer_reset
       8   light_moving
         8   -> timer_end
         8   -> timer_reset
      24   light_shadow
        24   -> proc_pixel
        24 __aeabi_idiv
      32   pixel_init
        32   -> __aeabi_memcpy
        32   -> __aeabi_memcpy4
        32   -> system_time
      16   proc_pixel
        16   -> system_time
        16   -> timer_end
        16   -> timer_reset
        16 __aeabi_uidiv
      16   sum_layers
        16   -> stripe_clear
       0   system_time
      16   timer_end
        16   -> system_time
       8   timer_reset
         8   -> system_time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      20  ?_0
      24  backs
       8  ch_patt
       1  count_color
      52  effect1
     192  effect2
      22  effects_proc
      24  get_message
      36  init_layers
      24  l_1
      24  l_2
      24  l_21
      24  l_22
      24  l_3
      24  l_4
      24  l_5
      24  l_6
      24  l_7
      24  l_8
    3000  layer
      12  light1
      12  light2
      12  light3
      12  light4
      12  light5
      12  light6
      12  light7
      12  light8
     112  light_eff_reverse
      84  light_eff_up
      54  light_moving
     316  light_shadow
       4  p_BLUE
       4  p_CIAN
       4  p_GREEN
       4  p_OCEAN
       4  p_ORANGE
       4  p_RED
       4  p_ROSE
       4  p_YELLOW
       4  p_light
      24  patterns
      48  pixel_init
     312  proc_pixel
       1  status2
      82  sum_layers
       6  system_time
      28  timer_end
      12  timer_reset

 
 3 002 bytes in section .bss
   348 bytes in section .data
   100 bytes in section .rodata
 1 468 bytes in section .text
 
 1 444 bytes of CODE  memory (+ 24 bytes shared)
   100 bytes of CONST memory
 3 350 bytes of DATA  memory

Errors: none
Warnings: none
